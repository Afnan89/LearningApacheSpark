<!DOCTYPE html>
<!-- saved from url=(0117)https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/ -->
<html lang="en" class="wf-playfairdisplay-n4-active wf-ubuntu-n4-active wf-ubuntu-n7-active wf-ubuntu-i7-active wf-ubuntu-i4-active wf-active"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="pingback" href="https://weiminwang.blog/xmlrpc.php">

<title>PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang</title>
<script src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/webfont.js" type="text/javascript" async=""></script><script type="text/javascript">
  WebFontConfig = {"google":{"families":["Playfair+Display:r:latin,latin-ext","Ubuntu:r,i,b,bi:latin,latin-ext"]}};
  (function() {
    var wf = document.createElement('script');
    wf.src = 'https://s1.wp.com/wp-content/plugins/custom-fonts/js/webfont.js';
    wf.type = 'text/javascript';
    wf.async = 'true';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(wf, s);
	})();
</script><style id="jetpack-custom-fonts-css">.wf-active body, .wf-active button, .wf-active input, .wf-active select, .wf-active textarea{font-family:"Ubuntu",sans-serif}.wf-active .main-navigation{font-family:"Ubuntu",sans-serif}.wf-active .post-nav{font-family:"Ubuntu",sans-serif}.wf-active h1{font-style:normal;font-weight:400}.wf-active h1, .wf-active h2, .wf-active h3, .wf-active h4, .wf-active h5, .wf-active h6{font-family:"Playfair Display",serif;font-style:normal;font-weight:400}.wf-active h1{font-style:normal;font-weight:400}.wf-active h2{font-style:normal;font-weight:400}.wf-active h3{font-style:normal;font-weight:400}.wf-active h4{font-style:normal;font-weight:400}.wf-active h5{font-style:normal;font-weight:400}.wf-active h6{font-style:normal;font-weight:400}.wf-active h2.site-description{font-weight:400;font-style:normal}.wf-active h2.comments-title{font-style:normal;font-weight:400}.wf-active h2.widget-title{font-weight:400;font-style:normal}.wf-active h3.comment-reply-title{font-style:normal;font-weight:400}.wf-active h1.page-title{font-style:normal;font-weight:400}.wf-active h2.entry-title{font-style:normal;font-weight:400}.wf-active h2.author-heading, .wf-active h2.author-title{font-style:normal;font-weight:400}.wf-active blockquote{font-family:"Playfair Display",serif;font-style:normal;font-weight:400}.wf-active blockquote > blockquote{font-style:normal;font-weight:400}.wf-active blockquote cite{font-style:normal;font-weight:400}.wf-active .action-text{font-family:"Playfair Display",serif;font-weight:400;font-style:normal}.wf-active .action-text:before{font-family:"Playfair Display",serif;font-style:normal;font-weight:400}.wf-active .toggle-on .action-text:before{font-style:normal;font-weight:400}.wf-active .post-title{font-family:"Playfair Display",serif;font-style:normal;font-weight:400}.wf-active .nav-links a{font-family:"Playfair Display",serif;font-style:normal;font-weight:400}.wf-active .footer-tags a{font-family:"Playfair Display",serif;font-style:normal;font-weight:400}.wf-active a.stickypost-link{font-family:"Playfair Display",serif;font-style:normal;font-weight:400}.wf-active h2.widget-title{font-weight:400;font-style:normal}.wf-active .widget_goodreads h2{font-style:normal;font-weight:400}@media only screen and (min-width: 50em){.wf-active h2.entry-title{font-style:normal;font-weight:400}}</style>
		<script src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/remote-login.php" type="text/javascript"></script>
		<script type="text/javascript">
		/* <![CDATA[ */
			if ( 'function' === typeof WPRemoteLogin ) {
				document.cookie = "wordpress_test_cookie=test; path=/";
				if ( document.cookie.match( /(;|^)\s*wordpress_test_cookie\=/ ) ) {
					WPRemoteLogin();
				}
			}
		/* ]]> */
		</script>
		<link rel="dns-prefetch" href="https://s2.wp.com/">
<link rel="dns-prefetch" href="https://s0.wp.com/">
<link rel="dns-prefetch" href="https://vanishingcodes.wordpress.com/">
<link rel="dns-prefetch" href="https://fonts.googleapis.com/">
<link rel="dns-prefetch" href="https://s1.wp.com/">
<link rel="alternate" type="application/rss+xml" title="Weimin Wang » Feed" href="https://weiminwang.blog/feed/">
<link rel="alternate" type="application/rss+xml" title="Weimin Wang » Comments Feed" href="https://weiminwang.blog/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="Weimin Wang » PySpark tutorial – a case study using Random Forest on unbalanced dataset Comments Feed" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/feed/">
	<script type="text/javascript">
		/* <![CDATA[ */
		function addLoadEvent(func) {
			var oldonload = window.onload;
			if (typeof window.onload != 'function') {
				window.onload = func;
			} else {
				window.onload = function () {
					oldonload();
					func();
				}
			}
		}
		/* ]]> */
	</script>
			<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/72x72\/","ext":".png","svgUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/s1.wp.com\/wp-includes\/js\/wp-emoji-release.min.js?m=1496863874h&ver=4.8.2-alpha-41336"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,56826,8203,55356,56819),0,0),c=j.toDataURL(),b===c&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55358,56794,8205,9794,65039),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55358,56794,8203,9794,65039),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script><script src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/wp-emoji-release.min.js" type="text/javascript" defer=""></script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel="stylesheet" id="all-css-0-1" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/saved_resource" type="text/css" media="all">
<link rel="stylesheet" id="sapor-fonts-css" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/css" type="text/css" media="all">
<link rel="stylesheet" id="all-css-2-1" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/saved_resource(1)" type="text/css" media="all">
<link rel="stylesheet" id="print-css-3-1" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/global-print.css" type="text/css" media="print">
<link rel="stylesheet" id="all-css-4-1" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/saved_resource(2)" type="text/css" media="all">
<script type="text/javascript" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/saved_resource(3)"></script>
<link rel="stylesheet" id="all-css-0-2" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/style.css" type="text/css" media="all">
<!--[if lt IE 8]>
<link rel='stylesheet' id='highlander-comments-ie7-css'  href='https://s1.wp.com/wp-content/mu-plugins/highlander-comments/style-ie7.css?m=1351637563h&#038;ver=20110606' type='text/css' media='all' />
<![endif]-->
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://vanishingcodes.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://s1.wp.com/wp-includes/wlwmanifest.xml"> 
<link rel="prev" title="Search Relevance Prediction – Improving Online Shopping Experience" href="https://weiminwang.blog/2016/05/10/search-relevance-prediction-improving-home-depot-shoppers-experience/">
<link rel="next" title="Apply Machine Learning to Email Campaign" href="https://weiminwang.blog/2016/12/22/apply-machine-learning-to-email-campaign/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/">
<link rel="shortlink" href="http://wp.me/p6mCl2-aa">
<link rel="alternate" type="application/json+oembed" href="https://public-api.wordpress.com/oembed/?format=json&amp;url=https%3A%2F%2Fweiminwang.blog%2F2016%2F06%2F09%2Fpyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset%2F&amp;for=wpcom-auto-discovery"><link rel="alternate" type="application/xml+oembed" href="https://public-api.wordpress.com/oembed/?format=xml&amp;url=https%3A%2F%2Fweiminwang.blog%2F2016%2F06%2F09%2Fpyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset%2F&amp;for=wpcom-auto-discovery">
<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article">
<meta property="og:title" content="PySpark tutorial – a case study using Random Forest on unbalanced dataset">
<meta property="og:url" content="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/">
<meta property="og:description" content="I would like to demonstrate a case tutorial of building a predictive model that predicts whether a customer will like a certain product. The original model with the real world data has been tested …">
<meta property="article:published_time" content="2016-06-09T12:41:16+00:00">
<meta property="article:modified_time" content="2016-06-13T15:29:49+00:00">
<meta property="og:site_name" content="Weimin Wang">
<meta property="og:image" content="https://vanishingcodes.files.wordpress.com/2016/06/neg_dis.png">
<meta property="og:image:secure_url" content="https://vanishingcodes.files.wordpress.com/2016/06/neg_dis.png">
<meta property="og:image" content="https://vanishingcodes.files.wordpress.com/2016/06/pos_dis.png">
<meta property="og:image:secure_url" content="https://vanishingcodes.files.wordpress.com/2016/06/pos_dis.png">
<meta property="og:image" content="https://vanishingcodes.files.wordpress.com/2016/06/build-business.png">
<meta property="og:image:secure_url" content="https://vanishingcodes.files.wordpress.com/2016/06/build-business.png">
<meta property="og:image" content="https://vanishingcodes.files.wordpress.com/2016/06/table.png">
<meta property="og:image:secure_url" content="https://vanishingcodes.files.wordpress.com/2016/06/table.png">
<meta property="og:image" content="https://vanishingcodes.files.wordpress.com/2016/06/dis.png">
<meta property="og:image:secure_url" content="https://vanishingcodes.files.wordpress.com/2016/06/dis.png">
<meta property="og:image" content="https://vanishingcodes.files.wordpress.com/2016/06/roc_64.png">
<meta property="og:image:secure_url" content="https://vanishingcodes.files.wordpress.com/2016/06/roc_64.png">
<meta property="og:locale" content="en_US">
<meta name="twitter:site" content="@wordpressdotcom">
<meta name="twitter:text:title" content="PySpark tutorial – a case study using Random Forest on unbalanced dataset">
<meta name="twitter:image0" content="https://vanishingcodes.files.wordpress.com/2016/06/neg_dis.png?w=640">
<meta name="twitter:image1" content="https://vanishingcodes.files.wordpress.com/2016/06/pos_dis.png?w=640">
<meta name="twitter:image2" content="https://vanishingcodes.files.wordpress.com/2016/06/build-business.png?w=640">
<meta name="twitter:image3" content="https://vanishingcodes.files.wordpress.com/2016/06/table.png?w=640">
<meta name="twitter:card" content="gallery">
<meta property="article:publisher" content="https://www.facebook.com/WordPresscom">
<link rel="shortcut icon" type="image/x-icon" href="https://s2.wp.com/i/favicon.ico" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="https://s2.wp.com/i/favicon.ico" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon-precomposed" href="https://s0.wp.com/i/webclip.png">
<link rel="openid.server" href="https://vanishingcodes.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="https://vanishingcodes.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="https://weiminwang.blog/osd.xml" title="Weimin Wang">
<link rel="search" type="application/opensearchdescription+xml" href="https://s1.wp.com/opensearch.xml" title="WordPress.com">
		<style type="text/css">
			.recentcomments a {
				display: inline !important;
				padding: 0 !important;
				margin: 0 !important;
			}

			table.recentcommentsavatartop img.avatar, table.recentcommentsavatarend img.avatar {
				border: 0px;
				margin: 0;
			}

			table.recentcommentsavatartop a, table.recentcommentsavatarend a {
				border: 0px !important;
				background-color: transparent !important;
			}

			td.recentcommentsavatarend, td.recentcommentsavatartop {
				padding: 0px 0px 1px 0px;
				margin: 0px;
			}

			td.recentcommentstextend {
				border: none !important;
				padding: 0px 0px 2px 10px;
			}

			.rtl td.recentcommentstextend {
				padding: 0px 10px 2px 0px;
			}

			td.recentcommentstexttop {
				border: none;
				padding: 0px 0px 0px 10px;
			}

			.rtl td.recentcommentstexttop {
				padding: 0px 10px 0px 0px;
			}
		</style>
		<meta name="application-name" content="Weimin Wang"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-task" content="name=Subscribe;action-uri=https://weiminwang.blog/feed/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="title" content="PySpark tutorial – a case study using Random Forest on unbalanced dataset | Weimin Wang on WordPress.com">
<meta name="description" content="I would like to demonstrate a case tutorial of building a predictive model that predicts whether a customer will like a certain product. The original model with the real world data has been tested on the platform of spark, but I will be using a mock-up data set for this tutorial. Since unbalanced data set is a very common in real business world,…">
<link rel="amphtml" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/amp/"><link rel="stylesheet" type="text/css" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/shCore.css"><link rel="stylesheet" type="text/css" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/shThemeDefault.css"><style type="text/css" id="syntaxhighlighteranchor"></style><link rel="stylesheet" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/css(1)" media="all">
<style type="text/css"></style><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/services.css"></head>

<body class="post-template-default single single-post postid-630 single-format-standard mp6 customizer-styles-applied onesidebar highlander-enabled highlander-light">

<div id="small-devices" class="device-bar">
	<button class="menu-toggle" aria-expanded="false"><span class="screen-reader-text">Show</span><span class="action-text">Show</span></button>
</div>
<div id="page" class="hfeed site">
	<a class="skip-link screen-reader-text" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#content">Skip to content</a>

	<header id="masthead" class="site-header" role="banner">

					<div class="site-branding">
				<h1 class="site-title"><a href="https://weiminwang.blog/" rel="home">Weimin Wang</a></h1>
				<h2 class="site-description"></h2>
			</div><!-- .site-branding -->
			</header><!-- #masthead -->


	<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-630" class="post-630 post type-post status-publish format-standard hentry category-uncategorized">
	<div class="entry-wrapper">
				<header class="entry-header">
			<h2 class="entry-title"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/" rel="bookmark">PySpark tutorial – a case study using Random Forest on unbalanced&nbsp;dataset</a></h2>		</header><!-- .entry-header -->

		<div class="entry-meta">
			<span class="posted-on"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/" rel="bookmark"><time class="entry-date published" datetime="2016-06-09T12:41:16+00:00">June 9, 2016</time><time class="updated" datetime="2016-06-13T15:29:49+00:00">June 13, 2016</time></a></span>					</div><!-- .entry-meta -->

		<div class="entry-content">
			<p><img data-attachment-id="1234" data-permalink="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/build-business/" data-orig-file="https://vanishingcodes.files.wordpress.com/2016/06/build-business.png?w=730" data-orig-size="1345,618" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="build-business" data-image-description="" data-medium-file="https://vanishingcodes.files.wordpress.com/2016/06/build-business.png?w=730?w=300" data-large-file="https://vanishingcodes.files.wordpress.com/2016/06/build-business.png?w=730?w=730" class="alignnone size-full wp-image-1234" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/build-business.png" alt="build-business" srcset="https://vanishingcodes.files.wordpress.com/2016/06/build-business.png?w=730 730w, https://vanishingcodes.files.wordpress.com/2016/06/build-business.png?w=150 150w, https://vanishingcodes.files.wordpress.com/2016/06/build-business.png?w=300 300w, https://vanishingcodes.files.wordpress.com/2016/06/build-business.png?w=768 768w, https://vanishingcodes.files.wordpress.com/2016/06/build-business.png?w=1024 1024w, https://vanishingcodes.files.wordpress.com/2016/06/build-business.png 1345w" sizes="(max-width: 730px) 100vw, 730px"></p>
<p>I would like to demonstrate&nbsp;a case tutorial of&nbsp;building a&nbsp;predictive model that predicts whether a customer will&nbsp;like&nbsp;a certain&nbsp;product. The&nbsp;original model with the real world data has been tested&nbsp;on the platform of spark, but I will be using a mock-up data set for this tutorial.</p>
<p>Since unbalanced data set is a very common in real business world, this tutorial will specifically showcase some of the tactics&nbsp;that could effectively deal with such challenge&nbsp;using&nbsp;PySpark.</p>
<p>Concretely, this session will cover the following topics:</p>
<ul>
<li>Case Scenario and Data set</li>
<li>Data Pre-processings – NAs replacement, one-hot encoding, pipe-lining, training and validation splits, etc.</li>
<li>Using mllib random forest classifier for binary classification.</li>
<li>Measuring performance using AUC score.</li>
<li>Different strategies to handle&nbsp;the problem of unbalanced dataset:
<ul>
<li>Down-Sampling and Up-Sampling</li>
<li>Ensemble of Down-Sampling models</li>
</ul>
</li>
</ul>
<h2><strong>The Case Scenario&nbsp;</strong></h2>
<p>Let’s assume your manager one day approaches you and asks you to build a Product Recommendation Engine. The engine&nbsp;should be able to predict the probabilities for each product being liked by a customer, when relevant data&nbsp;such as customer’s details, product’s info and so on is provided. And your model will then&nbsp;recommend the top 5 products based on those probabilities.</p>
<p>Your stakeholder is business department who will&nbsp;eventually use&nbsp;your model for recommendations. Specifically, each Sales Rep will ‘consult’ your model by telling it what type of customer she is going to visit before she actually sets on her trip. She will then&nbsp;bring along the recommended products list for the pitch,&nbsp;hoping that&nbsp;her trip will become&nbsp;fruitful.</p>
<h2><strong>The&nbsp;Data&nbsp;</strong></h2>
<p>You receive&nbsp;the data from your&nbsp;friendly <em>BI team</em>. Thankfully, they made your life easier by crunching all the&nbsp;data into one nice clean csv table so that&nbsp;you won’t&nbsp;need to painfully join and merge from different tables.&nbsp;Peeking at the top 3&nbsp;rows of the table shows you the following:</p>
<p><img data-attachment-id="1030" data-permalink="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/table/" data-orig-file="https://vanishingcodes.files.wordpress.com/2016/06/table.png?w=730" data-orig-size="949,321" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="table" data-image-description="" data-medium-file="https://vanishingcodes.files.wordpress.com/2016/06/table.png?w=730?w=300" data-large-file="https://vanishingcodes.files.wordpress.com/2016/06/table.png?w=730?w=730" class="alignnone size-full wp-image-1030" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/table.png" alt="table" srcset="https://vanishingcodes.files.wordpress.com/2016/06/table.png?w=730 730w, https://vanishingcodes.files.wordpress.com/2016/06/table.png?w=150 150w, https://vanishingcodes.files.wordpress.com/2016/06/table.png?w=300 300w, https://vanishingcodes.files.wordpress.com/2016/06/table.png?w=768 768w, https://vanishingcodes.files.wordpress.com/2016/06/table.png 949w" sizes="(max-width: 730px) 100vw, 730px"></p>
<p>Some of the predictors&nbsp;represent properties of products such as <em>product_price</em> or <em>product_features</em>, whereas others contain information of the customer, e.g. <em>customer title</em>, <em>age</em>.</p>
<p>On the other side, your <em>Big Data</em> <em>team</em> has set up the spark platform for you, and ingested the table into Data Lake so you can access it easily in PySpark. We start by importing the libraries and loading the data:</p>
<div><div id="highlighter_58108" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">pyspark.ml </code><code class="python keyword">import</code> <code class="python plain">Pipeline</code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">pyspark.ml.classification </code><code class="python keyword">import</code> <code class="python plain">RandomForestClassifier as RF</code></div><div class="line number3 index2 alt2"><code class="python keyword">from</code> <code class="python plain">pyspark.ml.feature </code><code class="python keyword">import</code> <code class="python plain">StringIndexer, VectorIndexer, VectorAssembler, SQLTransformer</code></div><div class="line number4 index3 alt1"><code class="python keyword">from</code> <code class="python plain">pyspark.ml.evaluation </code><code class="python keyword">import</code> <code class="python plain">MulticlassClassificationEvaluator, BinaryClassificationEvaluator</code></div><div class="line number5 index4 alt2"><code class="python keyword">from</code> <code class="python plain">pyspark.ml.tuning </code><code class="python keyword">import</code> <code class="python plain">CrossValidator, ParamGridBuilder</code></div><div class="line number6 index5 alt1"><code class="python keyword">import</code> <code class="python plain">numpy as np</code></div><div class="line number7 index6 alt2"><code class="python keyword">import</code> <code class="python plain">functools</code></div><div class="line number8 index7 alt1"><code class="python keyword">from</code> <code class="python plain">pyspark.ml.feature </code><code class="python keyword">import</code> <code class="python plain">OneHotEncoder</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="python plain">tableData </code><code class="python keyword">=</code> <code class="python plain">sqlContext.table(</code><code class="python string">'your_table_containing_products_feedback_information'</code><code class="python plain">)</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="python plain">cols_select </code><code class="python keyword">=</code> <code class="python plain">[</code><code class="python string">'prod_price'</code><code class="python plain">,</code></div><div class="line number13 index12 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_feat_1'</code><code class="python plain">,</code></div><div class="line number14 index13 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_feat_2'</code><code class="python plain">,</code></div><div class="line number15 index14 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_age'</code><code class="python plain">,</code></div><div class="line number16 index15 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_feat_3'</code><code class="python plain">,</code></div><div class="line number17 index16 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_region'</code><code class="python plain">,</code></div><div class="line number18 index17 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_type'</code><code class="python plain">,</code></div><div class="line number19 index18 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_sex'</code><code class="python plain">,</code></div><div class="line number20 index19 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_title'</code><code class="python plain">,</code></div><div class="line number21 index20 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'feedback'</code><code class="python plain">]</code></div><div class="line number22 index21 alt1"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">tableData.select(cols_select).dropDuplicates()</code></div></div></td></tr></tbody></table></div></div>
<h2>Data Pre-processing Steps</h2>
<h3>1. Skewed responses</h3>
<p>There are three types of responses – <strong><em>Positive</em>, <em>Neutral</em> and <em>Negative</em></strong>. The first step we can do is see how they are distributed:</p>
<div><div id="highlighter_966316" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">matplotlib </code><code class="python keyword">import</code> <code class="python plain">pyplot as plt</code></div><div class="line number2 index1 alt1"><code class="python keyword">%</code><code class="python plain">matplotlib inline</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="python plain">responses </code><code class="python keyword">=</code> <code class="python plain">df.groupBy(</code><code class="python string">'feedback'</code><code class="python plain">).count().collect()</code></div><div class="line number5 index4 alt2"><code class="python plain">categories </code><code class="python keyword">=</code> <code class="python plain">[i[</code><code class="python value">0</code><code class="python plain">] </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">responses]</code></div><div class="line number6 index5 alt1"><code class="python plain">counts </code><code class="python keyword">=</code> <code class="python plain">[i[</code><code class="python value">1</code><code class="python plain">] </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">responses]</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="python plain">ind </code><code class="python keyword">=</code> <code class="python plain">np.array(</code><code class="python functions">range</code><code class="python plain">(</code><code class="python functions">len</code><code class="python plain">(categories)))</code></div><div class="line number9 index8 alt2"><code class="python plain">width </code><code class="python keyword">=</code> <code class="python value">0.35</code></div><div class="line number10 index9 alt1"><code class="python plain">plt.bar(ind, counts, width</code><code class="python keyword">=</code><code class="python plain">width, color</code><code class="python keyword">=</code><code class="python string">'r'</code><code class="python plain">)</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="python plain">plt.ylabel(</code><code class="python string">'counts'</code><code class="python plain">)</code></div><div class="line number13 index12 alt2"><code class="python plain">plt.title(</code><code class="python string">'Response distribution'</code><code class="python plain">)</code></div><div class="line number14 index13 alt1"><code class="python plain">plt.xticks(ind </code><code class="python keyword">+</code> <code class="python plain">width</code><code class="python keyword">/</code><code class="python value">2.</code><code class="python plain">, categories)</code></div></div></td></tr></tbody></table></div></div>
<p><img data-attachment-id="779" data-permalink="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/dis/" data-orig-file="https://vanishingcodes.files.wordpress.com/2016/06/dis.png?w=730" data-orig-size="406,266" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="dis" data-image-description="" data-medium-file="https://vanishingcodes.files.wordpress.com/2016/06/dis.png?w=730?w=300" data-large-file="https://vanishingcodes.files.wordpress.com/2016/06/dis.png?w=730?w=406" class="alignnone size-full wp-image-779" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/dis.png" alt="dis" srcset="https://vanishingcodes.files.wordpress.com/2016/06/dis.png 406w, https://vanishingcodes.files.wordpress.com/2016/06/dis.png?w=150 150w, https://vanishingcodes.files.wordpress.com/2016/06/dis.png?w=300 300w" sizes="(max-width: 406px) 100vw, 406px"></p>
<p>The distribution&nbsp;looks quite skewed in the sense&nbsp;that ‘Positive’ cases are much more than ‘Neural’ and ‘Negative’ ones, and the volume of ‘Negative’ cases is extremely low.</p>
<p>The problem with ‘Negative’ cases here is most&nbsp;serious. However, since our&nbsp;job is to differentiate ‘Positive’&nbsp;cases from either&nbsp;‘Neutral’ or&nbsp;‘Negative’ ones, why don’t we just combine the ‘Neutral’ and ‘Negative’&nbsp;and form&nbsp;one group? So we&nbsp;choose to convert all ‘Neutral’ cases to ‘Negative’.</p>
<div><div id="highlighter_843892" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">pyspark.sql.functions </code><code class="python keyword">import</code> <code class="python plain">udf</code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">pyspark.sql.types </code><code class="python keyword">import</code> <code class="python plain">StringType</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="python plain">binarize </code><code class="python keyword">=</code> <code class="python keyword">lambda</code> <code class="python plain">x: </code><code class="python string">'Negative'</code> <code class="python keyword">if</code> <code class="python plain">x </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python string">'Neutral'</code> <code class="python keyword">else</code> <code class="python plain">x</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="python plain">udfValueToCategory </code><code class="python keyword">=</code> <code class="python plain">udf(binarize, StringType())</code></div><div class="line number7 index6 alt2"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">df.withColumn(</code><code class="python string">"binary_response"</code><code class="python plain">, udfConvertResponse(</code><code class="python string">"feedback"</code><code class="python plain">))</code></div></div></td></tr></tbody></table></div></div>
<p>Notice we have created a new column called ‘binary_response’, and use it to hold the binary cases of ‘Positive’ and ‘Negative’.</p>
<p>However, we have not solved the unbalanced data set issue since the ‘Positive’ cases are a lot more than ‘Negative’ ones. We will look into it later on by applying some strategies like <em>down-sampling</em> and<em> ensemble of sub-samplings</em>.</p>
<h3>2. Filling NA values and casting data types</h3>
<p>We&nbsp;convert&nbsp;numeric cols into ‘float’ or ‘int’ depending on the values. There are also categorical cols that contain null values, so we can&nbsp;fill in those with a’NA’ string as a new category, and leave the rest&nbsp;cols unchanged:</p>
<div><div id="highlighter_534907" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">cols_select </code><code class="python keyword">=</code> <code class="python plain">[</code><code class="python string">'prod_price'</code><code class="python plain">,</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_feat_1'</code><code class="python plain">,</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_feat_2'</code><code class="python plain">,</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_age'</code><code class="python plain">,</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_feat_3'</code><code class="python plain">,</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_region'</code><code class="python plain">,</code></div><div class="line number7 index6 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_type'</code><code class="python plain">,</code></div><div class="line number8 index7 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_sex'</code><code class="python plain">,</code></div><div class="line number9 index8 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_title'</code><code class="python plain">,</code></div><div class="line number10 index9 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'feedback'</code><code class="python plain">,</code></div><div class="line number11 index10 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'binary_response'</code><code class="python plain">]</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">df.select(df.prod_price.cast(</code><code class="python string">'float'</code><code class="python plain">), </code><code class="python comments"># convert numeric cols (int or float) into a 'int' or 'float'</code></div><div class="line number14 index13 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">df.prod_feat_1.cast(</code><code class="python string">'float'</code><code class="python plain">),</code></div><div class="line number15 index14 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">df.prod_feat_2.cast(</code><code class="python string">'float'</code><code class="python plain">),</code></div><div class="line number16 index15 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">df.cust_age.cast(</code><code class="python string">'int'</code><code class="python plain">),</code></div><div class="line number17 index16 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">*</code><code class="python plain">cols_select[</code><code class="python value">4</code><code class="python plain">:])</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">df.fillna({</code><code class="python string">'cust_region'</code><code class="python plain">: </code><code class="python string">'NA'</code><code class="python plain">, </code><code class="python string">'cust_title'</code><code class="python plain">: </code><code class="python string">'NA'</code><code class="python plain">, </code><code class="python string">'prod_type'</code><code class="python plain">: </code><code class="python string">'NA'</code><code class="python plain">}) </code><code class="python comments"># fill in 'N/A' entries for certain cols</code></div></div></td></tr></tbody></table></div></div>
<h3>3. Categorical col that&nbsp;has too many discrete values</h3>
<p>We are also interested to see if there are any categorical cols that have too many levels (or distinct values).</p>
<div><div id="highlighter_850075" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">for</code> <code class="python plain">col </code><code class="python keyword">in</code> <code class="python plain">df.columns[</code><code class="python value">4</code><code class="python plain">:</code><code class="python keyword">-</code><code class="python value">2</code><code class="python plain">]:</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(col, df.select(col).distinct().count())</code></div></div></td></tr></tbody></table></div></div>
<pre>prod_feat_3 553
cust_region 12
prod_type 35
cust_sex 2
cust_title 12</pre>
<p>The prod_feat_3 simply has too many levels (discrete values)! And&nbsp;a simple way to resolve the problem&nbsp;is to group all the categories that rank lower than a threshold into one category, namely “MinorityCategory”. Below is how&nbsp;we do:</p>
<div><div id="highlighter_884218" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">pyspark.sql.functions </code><code class="python keyword">import</code> <code class="python plain">udf</code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">pyspark.sql.types </code><code class="python keyword">import</code> <code class="python plain">StringType</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="python plain">COUNT_THRESHOLD </code><code class="python keyword">=</code> <code class="python value">150</code> <code class="python comments"># threshold to filter </code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="python comments"># create a temporary col "count" as counting for each value of "prod_feat_3"</code></div><div class="line number7 index6 alt2"><code class="python plain">prodFeat3Count </code><code class="python keyword">=</code> <code class="python plain">df.groupBy(</code><code class="python string">"prod_feat_3"</code><code class="python plain">).count()</code></div><div class="line number8 index7 alt1"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">df.join(prodFeat3Count, </code><code class="python string">"prod_feat_3"</code><code class="python plain">, </code><code class="python string">"inner"</code><code class="python plain">)</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="python keyword">def</code> <code class="python plain">convertMinority(originalCol, colCount):</code></div><div class="line number11 index10 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">if</code> <code class="python plain">colCount &gt; COUNT_THRESHOLD:</code></div><div class="line number12 index11 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">originalCol</code></div><div class="line number13 index12 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">else</code><code class="python plain">:</code></div><div class="line number14 index13 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python string">'MinorityCategory'</code></div><div class="line number15 index14 alt2"><code class="python plain">createNewColFromTwo </code><code class="python keyword">=</code> <code class="python plain">udf(convertMinority, StringType())</code></div><div class="line number16 index15 alt1"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">df.withColumn(</code><code class="python string">'prod_feat_3_reduced'</code><code class="python plain">, createNewColFromTwo(df[</code><code class="python string">'prod_feat_3'</code><code class="python plain">], df[</code><code class="python string">'count'</code><code class="python plain">]))</code></div><div class="line number17 index16 alt2"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">df.drop(</code><code class="python string">'prod_feat_3'</code><code class="python plain">)</code></div><div class="line number18 index17 alt1"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">df.drop(</code><code class="python string">'count'</code><code class="python plain">)</code></div></div></td></tr></tbody></table></div></div>
<h3>4. One-hot encoding categorical cols</h3>
<p>For those categorical cols, we will apply one-hot encoding method to convert them into dummy cols:</p>
<div><div id="highlighter_407778" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">column_vec_in </code><code class="python keyword">=</code> <code class="python plain">[</code><code class="python string">'prod_feat_3_reduced'</code><code class="python plain">, </code><code class="python string">'cust_region'</code><code class="python plain">, </code><code class="python string">'prod_type'</code><code class="python plain">, </code><code class="python string">'cust_sex'</code><code class="python plain">, </code><code class="python string">'cust_title'</code><code class="python plain">]</code></div><div class="line number2 index1 alt1"><code class="python plain">column_vec_out </code><code class="python keyword">=</code> <code class="python plain">[</code><code class="python string">'prod_feat_3_reduced_catVec'</code><code class="python plain">,</code><code class="python string">'cust_region_catVec'</code><code class="python plain">, </code><code class="python string">'prod_type_catVec'</code><code class="python plain">,</code><code class="python string">'cust_sex_catVec'</code><code class="python plain">,</code></div><div class="line number3 index2 alt2"><code class="python string">'cust_title_catVec'</code><code class="python plain">]</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="python plain">indexers </code><code class="python keyword">=</code> <code class="python plain">[StringIndexer(inputCol</code><code class="python keyword">=</code><code class="python plain">x, outputCol</code><code class="python keyword">=</code><code class="python plain">x</code><code class="python keyword">+</code><code class="python string">'_tmp'</code><code class="python plain">)</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">x </code><code class="python keyword">in</code> <code class="python plain">column_vec_in ]</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="python plain">encoders </code><code class="python keyword">=</code> <code class="python plain">[OneHotEncoder(dropLast</code><code class="python keyword">=</code><code class="python color1">False</code><code class="python plain">, inputCol</code><code class="python keyword">=</code><code class="python plain">x</code><code class="python keyword">+</code><code class="python string">"_tmp"</code><code class="python plain">, outputCol</code><code class="python keyword">=</code><code class="python plain">y)</code></div><div class="line number9 index8 alt2"><code class="python keyword">for</code> <code class="python plain">x,y </code><code class="python keyword">in</code> <code class="python functions">zip</code><code class="python plain">(column_vec_in, column_vec_out)]</code></div><div class="line number10 index9 alt1"><code class="python plain">tmp </code><code class="python keyword">=</code> <code class="python plain">[[i,j] </code><code class="python keyword">for</code> <code class="python plain">i,j </code><code class="python keyword">in</code> <code class="python functions">zip</code><code class="python plain">(indexers, encoders)]</code></div><div class="line number11 index10 alt2"><code class="python plain">tmp </code><code class="python keyword">=</code> <code class="python plain">[i </code><code class="python keyword">for</code> <code class="python plain">sublist </code><code class="python keyword">in</code> <code class="python plain">tmp </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">sublist]</code></div></div></td></tr></tbody></table></div></div>
<p>Finally, we can group&nbsp;all the predictors as&nbsp;‘features’, and the response col as ‘label’. We then streamline the entire&nbsp;process using&nbsp;a function called ‘Pipeline’ which will do all the jobs sequentially for us.</p>
<div><div id="highlighter_440910" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python comments"># prepare labeled sets</code></div><div class="line number2 index1 alt1"><code class="python plain">cols_now </code><code class="python keyword">=</code> <code class="python plain">[</code><code class="python string">'prod_price'</code><code class="python plain">,</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_feat_1'</code><code class="python plain">,</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_feat_2'</code><code class="python plain">,</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_age'</code><code class="python plain">,</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_feat_3_reduced_catVec'</code><code class="python plain">,</code></div><div class="line number7 index6 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_region_catVec'</code><code class="python plain">,</code></div><div class="line number8 index7 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'prod_type_catVec'</code><code class="python plain">,</code></div><div class="line number9 index8 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_sex_catVec'</code><code class="python plain">,</code></div><div class="line number10 index9 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">'cust_title_catVec'</code><code class="python plain">]</code></div><div class="line number11 index10 alt2"><code class="python plain">assembler_features </code><code class="python keyword">=</code> <code class="python plain">VectorAssembler(inputCols</code><code class="python keyword">=</code><code class="python plain">cols_now, outputCol</code><code class="python keyword">=</code><code class="python string">'features'</code><code class="python plain">)</code></div><div class="line number12 index11 alt1"><code class="python plain">labelIndexer </code><code class="python keyword">=</code> <code class="python plain">StringIndexer(inputCol</code><code class="python keyword">=</code><code class="python string">'binary_response'</code><code class="python plain">, outputCol</code><code class="python keyword">=</code><code class="python string">"label"</code><code class="python plain">)</code></div><div class="line number13 index12 alt2"><code class="python plain">tmp </code><code class="python keyword">+</code><code class="python keyword">=</code> <code class="python plain">[assembler_features, labelIndexer]</code></div><div class="line number14 index13 alt1"><code class="python plain">pipeline </code><code class="python keyword">=</code> <code class="python plain">Pipeline(stages</code><code class="python keyword">=</code><code class="python plain">tmp)</code></div></div></td></tr></tbody></table></div></div>
<h3>5. Split into training and validation sets.</h3>
<p>This part is&nbsp;straightforward. We randomly select 80% as the&nbsp;training data, and the remaining 20% as test set or validation set.</p>
<p>Notice: It is important to set seed for the randomSplit() function in order to get same split for each run. (This is the crucial step for the success of the subsequent tests later on)</p>
<div><div id="highlighter_349312" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">allData </code><code class="python keyword">=</code> <code class="python plain">pipeline.fit(df).transform(df)</code></div><div class="line number2 index1 alt1"><code class="python plain">allData.cache()</code></div><div class="line number3 index2 alt2"><code class="python plain">trainingData, testData </code><code class="python keyword">=</code> <code class="python plain">allData.randomSplit([</code><code class="python value">0.8</code><code class="python plain">,</code><code class="python value">0.2</code><code class="python plain">], seed</code><code class="python keyword">=</code><code class="python value">0</code><code class="python plain">) </code><code class="python comments"># need to ensure same split for each time</code></div><div class="line number4 index3 alt1"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Distribution of Pos and Neg in trainingData is: "</code><code class="python plain">, trainingData.groupBy(</code><code class="python string">"label"</code><code class="python plain">).count().take(</code><code class="python value">3</code><code class="python plain">))</code></div></div></td></tr></tbody></table></div></div>
<pre>Distribution of Pos and Neg in trainingData is:  [Row(label=1.0, count=144014), Row(label=0.0, count=520771)]</pre>
<h2>Prediction and Evaluation of AUC</h2>
<h3>Train and prediction</h3>
<p>We are using a Random Forest with numTrees = 200. And we train on trainingData and predict on testData.</p>
<div><div id="highlighter_819283" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">rf </code><code class="python keyword">=</code> <code class="python plain">RF(labelCol</code><code class="python keyword">=</code><code class="python string">'label'</code><code class="python plain">, featuresCol</code><code class="python keyword">=</code><code class="python string">'features'</code><code class="python plain">,numTrees</code><code class="python keyword">=</code><code class="python value">200</code><code class="python plain">)</code></div><div class="line number2 index1 alt1"><code class="python plain">fit </code><code class="python keyword">=</code> <code class="python plain">rf.fit(trainingData)</code></div><div class="line number3 index2 alt2"><code class="python plain">transformed </code><code class="python keyword">=</code> <code class="python plain">fit.transform(testData)</code></div></div></td></tr></tbody></table></div></div>
<h3>AUC</h3>
<p>Use the test data labels to calculate AUC score against the predicted probabilities:</p>
<div><div id="highlighter_51183" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">pyspark.mllib.evaluation </code><code class="python keyword">import</code> <code class="python plain">BinaryClassificationMetrics as metric</code></div><div class="line number2 index1 alt1"><code class="python plain">results </code><code class="python keyword">=</code> <code class="python plain">transformed.select([</code><code class="python string">'probability'</code><code class="python plain">, </code><code class="python string">'label'</code><code class="python plain">])</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="python comments">## prepare score-label set</code></div><div class="line number5 index4 alt2"><code class="python plain">results_collect </code><code class="python keyword">=</code> <code class="python plain">results.collect()</code></div><div class="line number6 index5 alt1"><code class="python plain">results_list </code><code class="python keyword">=</code> <code class="python plain">[(</code><code class="python functions">float</code><code class="python plain">(i[</code><code class="python value">0</code><code class="python plain">][</code><code class="python value">0</code><code class="python plain">]), </code><code class="python value">1.0</code><code class="python keyword">-</code><code class="python functions">float</code><code class="python plain">(i[</code><code class="python value">1</code><code class="python plain">])) </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">results_collect]</code></div><div class="line number7 index6 alt2"><code class="python plain">scoreAndLabels </code><code class="python keyword">=</code> <code class="python plain">sc.parallelize(results_list)</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="python plain">metrics </code><code class="python keyword">=</code> <code class="python plain">metric(scoreAndLabels)</code></div><div class="line number10 index9 alt1"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"The ROC score is (@numTrees=200): "</code><code class="python plain">, metrics.areaUnderROC)</code></div></div></td></tr></tbody></table></div></div>
<p>The ROC score is (@numTrees=200): 0.6425143766095695</p>
<p>To visualize the AUC score, we can&nbsp;draw&nbsp;the ROC curve as below:</p>
<div><div id="highlighter_295754" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">sklearn.metrics </code><code class="python keyword">import</code> <code class="python plain">roc_curve, auc</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="python plain">fpr </code><code class="python keyword">=</code> <code class="python functions">dict</code><code class="python plain">()</code></div><div class="line number4 index3 alt1"><code class="python plain">tpr </code><code class="python keyword">=</code> <code class="python functions">dict</code><code class="python plain">()</code></div><div class="line number5 index4 alt2"><code class="python plain">roc_auc </code><code class="python keyword">=</code> <code class="python functions">dict</code><code class="python plain">()</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="python plain">y_test </code><code class="python keyword">=</code> <code class="python plain">[i[</code><code class="python value">1</code><code class="python plain">] </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">results_list]</code></div><div class="line number8 index7 alt1"><code class="python plain">y_score </code><code class="python keyword">=</code> <code class="python plain">[i[</code><code class="python value">0</code><code class="python plain">] </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">results_list]</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="python plain">fpr, tpr, _ </code><code class="python keyword">=</code> <code class="python plain">roc_curve(y_test, y_score)</code></div><div class="line number11 index10 alt2"><code class="python plain">roc_auc </code><code class="python keyword">=</code> <code class="python plain">auc(fpr, tpr)</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="python keyword">%</code><code class="python plain">matplotlib inline</code></div><div class="line number14 index13 alt1"><code class="python plain">plt.figure()</code></div><div class="line number15 index14 alt2"><code class="python plain">plt.plot(fpr, tpr, label</code><code class="python keyword">=</code><code class="python string">'ROC curve (area = %0.2f)'</code> <code class="python keyword">%</code> <code class="python plain">roc_auc)</code></div><div class="line number16 index15 alt1"><code class="python plain">plt.plot([</code><code class="python value">0</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">], [</code><code class="python value">0</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">], </code><code class="python string">'k--'</code><code class="python plain">)</code></div><div class="line number17 index16 alt2"><code class="python plain">plt.xlim([</code><code class="python value">0.0</code><code class="python plain">, </code><code class="python value">1.0</code><code class="python plain">])</code></div><div class="line number18 index17 alt1"><code class="python plain">plt.ylim([</code><code class="python value">0.0</code><code class="python plain">, </code><code class="python value">1.05</code><code class="python plain">])</code></div><div class="line number19 index18 alt2"><code class="python plain">plt.xlabel(</code><code class="python string">'False Positive Rate'</code><code class="python plain">)</code></div><div class="line number20 index19 alt1"><code class="python plain">plt.ylabel(</code><code class="python string">'True Positive Rate'</code><code class="python plain">)</code></div><div class="line number21 index20 alt2"><code class="python plain">plt.title(</code><code class="python string">'Receiver operating characteristic example'</code><code class="python plain">)</code></div><div class="line number22 index21 alt1"><code class="python plain">plt.legend(loc</code><code class="python keyword">=</code><code class="python string">"lower right"</code><code class="python plain">)</code></div><div class="line number23 index22 alt2"><code class="python plain">plt.show()</code></div></div></td></tr></tbody></table></div></div>
<p><img data-attachment-id="1272" data-permalink="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/roc_64/" data-orig-file="https://vanishingcodes.files.wordpress.com/2016/06/roc_64.png?w=730" data-orig-size="392,281" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="roc_64" data-image-description="" data-medium-file="https://vanishingcodes.files.wordpress.com/2016/06/roc_64.png?w=730?w=300" data-large-file="https://vanishingcodes.files.wordpress.com/2016/06/roc_64.png?w=730?w=392" class="alignnone size-full wp-image-1272" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/roc_64.png" alt="roc_64" srcset="https://vanishingcodes.files.wordpress.com/2016/06/roc_64.png 392w, https://vanishingcodes.files.wordpress.com/2016/06/roc_64.png?w=150 150w, https://vanishingcodes.files.wordpress.com/2016/06/roc_64.png?w=300 300w" sizes="(max-width: 392px) 100vw, 392px"></p>
<p>As we can see from above, the area between the blue line and dashed line measures&nbsp;the&nbsp;usefulness&nbsp;our model has gained over a random guess of flipping a coin.</p>
<p>The score is 0.64, which is not too optimistic</p>
<p>Well it could be because the features in the data set do not have enough information to train our model, and maybe we should talk with our&nbsp;BI team to see if it is possible to obtain&nbsp;additional&nbsp;insightful features.</p>
<p>But that’s not the focus of this tutorial anyway :)</p>
<p>To gain a better understanding of our model’s performance, we can plot the distribution of our predictions:</p>
<div><div id="highlighter_651137" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">all_probs </code><code class="python keyword">=</code> <code class="python plain">transformed.select(</code><code class="python string">"probability"</code><code class="python plain">).collect()</code></div><div class="line number2 index1 alt1"><code class="python plain">pos_probs </code><code class="python keyword">=</code> <code class="python plain">[i[</code><code class="python value">0</code><code class="python plain">][</code><code class="python value">0</code><code class="python plain">] </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">all_probs]</code></div><div class="line number3 index2 alt2"><code class="python plain">neg_probs </code><code class="python keyword">=</code> <code class="python plain">[i[</code><code class="python value">0</code><code class="python plain">][</code><code class="python value">1</code><code class="python plain">] </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">all_probs]</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="python keyword">from</code> <code class="python plain">matplotlib </code><code class="python keyword">import</code> <code class="python plain">pyplot as plt</code></div><div class="line number6 index5 alt1"><code class="python keyword">%</code><code class="python plain">matplotlib inline</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="python comments"># pos</code></div><div class="line number9 index8 alt2"><code class="python plain">plt.hist(pos_probs, </code><code class="python value">50</code><code class="python plain">, normed</code><code class="python keyword">=</code><code class="python value">1</code><code class="python plain">, facecolor</code><code class="python keyword">=</code><code class="python string">'green'</code><code class="python plain">, alpha</code><code class="python keyword">=</code><code class="python value">0.75</code><code class="python plain">)</code></div><div class="line number10 index9 alt1"><code class="python plain">plt.xlabel(</code><code class="python string">'predicted_values'</code><code class="python plain">)</code></div><div class="line number11 index10 alt2"><code class="python plain">plt.ylabel(</code><code class="python string">'Counts'</code><code class="python plain">)</code></div><div class="line number12 index11 alt1"><code class="python plain">plt.title(</code><code class="python string">'Probabilities for positive cases'</code><code class="python plain">)</code></div><div class="line number13 index12 alt2"><code class="python plain">plt.grid(</code><code class="python color1">True</code><code class="python plain">)</code></div><div class="line number14 index13 alt1"><code class="python plain">plt.show()</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="python comments"># neg</code></div><div class="line number17 index16 alt2"><code class="python plain">plt.hist(neg_probs, </code><code class="python value">50</code><code class="python plain">, normed</code><code class="python keyword">=</code><code class="python value">1</code><code class="python plain">, facecolor</code><code class="python keyword">=</code><code class="python string">'green'</code><code class="python plain">, alpha</code><code class="python keyword">=</code><code class="python value">0.75</code><code class="python plain">)</code></div><div class="line number18 index17 alt1"><code class="python plain">plt.xlabel(</code><code class="python string">'predicted_values'</code><code class="python plain">)</code></div><div class="line number19 index18 alt2"><code class="python plain">plt.ylabel(</code><code class="python string">'Counts'</code><code class="python plain">)</code></div><div class="line number20 index19 alt1"><code class="python plain">plt.title(</code><code class="python string">'Probabilities for negative cases'</code><code class="python plain">)</code></div><div class="line number21 index20 alt2"><code class="python plain">plt.grid(</code><code class="python color1">True</code><code class="python plain">)</code></div><div class="line number22 index21 alt1"><code class="python plain">plt.show()</code></div></div></td></tr></tbody></table></div></div>
<div class="tiled-gallery type-rectangular" data-original-width="730" data-carousel-extra="{&quot;blog_id&quot;:94048608,&quot;permalink&quot;:&quot;https:\/\/weiminwang.blog\/2016\/06\/09\/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset\/&quot;,&quot;likes_blog_id&quot;:94048608}"> <div class="gallery-row" style="width: 728px; height: 275px;" data-original-width="730" data-original-height="276"> <div class="gallery-group images-1" style="width: 373px; height: 275px;" data-original-width="375" data-original-height="276"> <div class="tiled-gallery-item tiled-gallery-item-large" itemprop="associatedMedia" itemscope="" itemtype="http://schema.org/ImageObject"> <a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/neg_dis/" border="0" itemprop="url"> <meta itemprop="width" content="371"> <meta itemprop="height" content="272"> <img data-attachment-id="897" data-orig-file="https://vanishingcodes.files.wordpress.com/2016/06/neg_dis.png" data-orig-size="367,269" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="neg_dis" data-image-description="" data-medium-file="https://vanishingcodes.files.wordpress.com/2016/06/neg_dis.png?w=300" data-large-file="https://vanishingcodes.files.wordpress.com/2016/06/neg_dis.png?w=367" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/neg_dis.png" width="369" height="271" data-original-width="371" data-original-height="272" itemprop="http://schema.org/image" title="neg_dis" alt="neg_dis" style="width: 369px; height: 271px;" srcset="https://vanishingcodes.files.wordpress.com/2016/06/neg_dis.png?w=369&amp;h=271&amp;zoom=2 2x" src-orig="https://vanishingcodes.files.wordpress.com/2016/06/neg_dis.png?w=371&amp;h=272" scale="2"> </a> </div> </div> <!-- close group --> <div class="gallery-group images-1" style="width: 354px; height: 275px;" data-original-width="355" data-original-height="276"> <div class="tiled-gallery-item tiled-gallery-item-large" itemprop="associatedMedia" itemscope="" itemtype="http://schema.org/ImageObject"> <a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/pos_dis/" border="0" itemprop="url"> <meta itemprop="width" content="351"> <meta itemprop="height" content="272"> <img data-attachment-id="898" data-orig-file="https://vanishingcodes.files.wordpress.com/2016/06/pos_dis.png" data-orig-size="357,276" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="pos_dis" data-image-description="" data-medium-file="https://vanishingcodes.files.wordpress.com/2016/06/pos_dis.png?w=300" data-large-file="https://vanishingcodes.files.wordpress.com/2016/06/pos_dis.png?w=357" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/pos_dis.png" width="350" height="271" data-original-width="351" data-original-height="272" itemprop="http://schema.org/image" title="pos_dis" alt="pos_dis" style="width: 350px; height: 271px;" srcset="https://vanishingcodes.files.wordpress.com/2016/06/pos_dis.png?w=350&amp;h=271&amp;zoom=2 2x" src-orig="https://vanishingcodes.files.wordpress.com/2016/06/pos_dis.png?w=351&amp;h=272" scale="2"> </a> </div> </div> <!-- close group --> </div> <!-- close row --> </div>
<p>As can be seen, the predicted probabilities are highly skewed towards the Positive. This is not surprising as this is demonstrated by the fact that the percentage of data which&nbsp;are positive is around 79%!</p>
<p>It is time to dig&nbsp;into the unbalanced data issue.</p>
<h2>Up- and Down-Samplings</h2>
<p>Since the data set is highly skewed – we have more Positive training samples than Negative training samples – we will need to try out some&nbsp;strategies that counter the unbalance.</p>
<p>Unfortunately, the Random Forest implementation in spark’s mllib package doesn’t have the ‘<strong>Class Weights</strong>‘ parameter that we could&nbsp;tune, which&nbsp;could have taken&nbsp;care of the problem internally within the model itself (i.e. it penalizes more when the model mis-classifies a minority class than a majority one). Thus we will need to manually implement some naive methods from scratch.</p>
<p>The simplest ways we can do are&nbsp;up- or&nbsp;down-samplings. Up-sampling means to randomly sample (with replacement) some training cases from the minor classes (the negative cases&nbsp;in this case) as additional data points added into training data, whereas down-sampling means to randomly filter out some of the majority cases. Both methods will tend to make the training data more balanced (however at the cost of bias and overfitting).</p>
<h3>Down-sampling</h3>
<p>Here’s the way&nbsp;to implement down-sampling</p>
<div><div id="highlighter_803212" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">numpy.random </code><code class="python keyword">import</code> <code class="python plain">randint</code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">pyspark.sql.functions </code><code class="python keyword">import</code> <code class="python plain">udf</code></div><div class="line number3 index2 alt2"><code class="python keyword">from</code> <code class="python plain">pyspark.sql.types </code><code class="python keyword">import</code> <code class="python plain">IntegerType</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="python plain">RATIO_ADJUST </code><code class="python keyword">=</code> <code class="python value">2.0</code> <code class="python comments">## ratio of pos to neg in the df_subsample</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="python plain">counts </code><code class="python keyword">=</code> <code class="python plain">trainingData.select(</code><code class="python string">'binary_response'</code><code class="python plain">).groupBy(</code><code class="python string">'binary_response'</code><code class="python plain">).count().collect()</code></div><div class="line number8 index7 alt1"><code class="python plain">higherBound </code><code class="python keyword">=</code> <code class="python plain">counts[</code><code class="python value">0</code><code class="python plain">][</code><code class="python value">1</code><code class="python plain">]</code></div><div class="line number9 index8 alt2"><code class="python plain">TRESHOLD_TO_FILTER </code><code class="python keyword">=</code> <code class="python functions">int</code><code class="python plain">(RATIO_ADJUST </code><code class="python keyword">*</code> <code class="python functions">float</code><code class="python plain">(counts[</code><code class="python value">1</code><code class="python plain">][</code><code class="python value">1</code><code class="python plain">]) </code><code class="python keyword">/</code> <code class="python plain">counts[</code><code class="python value">0</code><code class="python plain">][</code><code class="python value">1</code><code class="python plain">] </code><code class="python keyword">*</code> <code class="python plain">higherBound)</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="python plain">randGen </code><code class="python keyword">=</code> <code class="python keyword">lambda</code> <code class="python plain">x: randint(</code><code class="python value">0</code><code class="python plain">, higherBound) </code><code class="python keyword">if</code> <code class="python plain">x </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python string">'Positive'</code> <code class="python keyword">else</code> <code class="python keyword">-</code><code class="python value">1</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="python plain">udfRandGen </code><code class="python keyword">=</code> <code class="python plain">udf(randGen, IntegerType())</code></div><div class="line number14 index13 alt1"><code class="python plain">trainingData </code><code class="python keyword">=</code> <code class="python plain">trainingData.withColumn(</code><code class="python string">"randIndex"</code><code class="python plain">, udfRandGen(</code><code class="python string">"binary_response"</code><code class="python plain">))</code></div><div class="line number15 index14 alt2"><code class="python plain">df_subsample </code><code class="python keyword">=</code> <code class="python plain">trainingData.</code><code class="python functions">filter</code><code class="python plain">(trainingData[</code><code class="python string">'randIndex'</code><code class="python plain">] &lt; TRESHOLD_TO_FILTER)</code></div><div class="line number16 index15 alt1"><code class="python plain">df_subsample </code><code class="python keyword">=</code> <code class="python plain">df_subsample.drop(</code><code class="python string">'randIndex'</code><code class="python plain">)</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Distribution of Pos and Neg cases of the down-sampled training data are: \n"</code><code class="python plain">, df_subsample.groupBy(</code><code class="python string">"label"</code><code class="python plain">).count().take(</code><code class="python value">3</code><code class="python plain">))</code></div></div></td></tr></tbody></table></div></div>
<pre>Distribution of Pos and Neg cases of the down-sampled training data are: 
 [Row(label=1.0, count=144014), Row(label=0.0, count=<strong>287482)]</strong></pre>
<p><strong>Explanation – For trainingData:</strong>&nbsp;we randomly assigned an int as ‘randIndex’ to&nbsp;each majority data point, and then filter out those whose ‘randIndex’ is larger than a threshold we have calculated, so that the&nbsp;data points from the majority class – ‘Positive’ – will be much less. However, we&nbsp;won’t touch the data points from the minority class – ‘Negative’&nbsp;– so the ‘count’ value in Row(label=1.0, count=<strong>144014</strong>) shown above is exactly the same as previously for trainingData.</p>
<p><strong>For testData</strong>: We will not do anything about it now.</p>
<p>Same way for training and validating as before:</p>
<div><div id="highlighter_361056" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python comments">## training and prediction</code></div><div class="line number2 index1 alt1"><code class="python plain">rf </code><code class="python keyword">=</code> <code class="python plain">RF(labelCol</code><code class="python keyword">=</code><code class="python string">'label'</code><code class="python plain">, featuresCol</code><code class="python keyword">=</code><code class="python string">'features'</code><code class="python plain">,numTrees</code><code class="python keyword">=</code><code class="python value">200</code><code class="python plain">)</code></div><div class="line number3 index2 alt2"><code class="python plain">fit </code><code class="python keyword">=</code> <code class="python plain">rf.fit(df_subsample)</code></div><div class="line number4 index3 alt1"><code class="python plain">transformed </code><code class="python keyword">=</code> <code class="python plain">fit.transform(testData)</code></div></div></td></tr></tbody></table></div></div>
<p>Results:</p>
<div><div id="highlighter_82464" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python comments">## results and evaluation</code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">pyspark.mllib.evaluation </code><code class="python keyword">import</code> <code class="python plain">BinaryClassificationMetrics as metric</code></div><div class="line number3 index2 alt2"><code class="python plain">results </code><code class="python keyword">=</code> <code class="python plain">transformed.select([</code><code class="python string">'probability'</code><code class="python plain">, </code><code class="python string">'label'</code><code class="python plain">])</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="python plain">results_collect </code><code class="python keyword">=</code> <code class="python plain">results.collect()</code></div><div class="line number6 index5 alt1"><code class="python plain">results_list </code><code class="python keyword">=</code> <code class="python plain">[(</code><code class="python functions">float</code><code class="python plain">(i[</code><code class="python value">0</code><code class="python plain">][</code><code class="python value">0</code><code class="python plain">]), </code><code class="python value">1.0</code><code class="python keyword">-</code><code class="python functions">float</code><code class="python plain">(i[</code><code class="python value">1</code><code class="python plain">])) </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">results_collect]</code></div><div class="line number7 index6 alt2"><code class="python plain">scoreAndLabels </code><code class="python keyword">=</code> <code class="python plain">sc.parallelize(results_list)</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="python plain">metrics </code><code class="python keyword">=</code> <code class="python plain">metric(scoreAndLabels)</code></div><div class="line number10 index9 alt1"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"The ROC score is (@numTrees=200): "</code><code class="python plain">, metrics.areaUnderROC)</code></div></div></td></tr></tbody></table></div></div>
<div class="output_subarea output_text output_stream output_stdout">
<pre>The ROC score is (@numTrees=200):  0.6463328674547113</pre>
</div>
<p>Awesome! Our method seems to work out and the ROC improves slightly to 0.646.</p>
<p><em>I won’t paste the code for <strong>up-sampling</strong> cause it’s essentially quite straightforward.&nbsp;It did improve the score (slightly) as well!</em></p>
<h3>Ensemble of Down-samplings</h3>
<p>Let’s&nbsp;take another look at the down-sampling method above.</p>
<p>Since each time when we do&nbsp;a subsampling of&nbsp;trainingData, we will be throwing away some data points that belong to the “Positive” class, thus we will miss out information which could potentially be used to train our&nbsp;model.</p>
<p>Therefore, we want to take multiple down-samplings of the trainingData, each of which will give us a slightly different data set to train our model. In the end, we will ensemble, or take the average of, the total prediction results from all the models trained using different data sets,&nbsp;and hopefully to get a better overall predictions.</p>
<p>Let’s jolt&nbsp;down the ideas in codes:</p>
<div><div id="highlighter_431584" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">numpy.random </code><code class="python keyword">import</code> <code class="python plain">randint</code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">pyspark.sql.functions </code><code class="python keyword">import</code> <code class="python plain">udf</code></div><div class="line number3 index2 alt2"><code class="python keyword">from</code> <code class="python plain">pyspark.sql.types </code><code class="python keyword">import</code> <code class="python plain">IntegerType</code></div><div class="line number4 index3 alt1"><code class="python keyword">from</code> <code class="python plain">pyspark.mllib.evaluation </code><code class="python keyword">import</code> <code class="python plain">BinaryClassificationMetrics as metric</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="python plain">RATIO_ADJUST </code><code class="python keyword">=</code> <code class="python value">3.0</code> <code class="python comments">## ratio of pos to neg in the df_subsample</code></div><div class="line number7 index6 alt2"><code class="python plain">TOTAL_MODELS </code><code class="python keyword">=</code> <code class="python value">10</code></div><div class="line number8 index7 alt1"><code class="python plain">total_results </code><code class="python keyword">=</code> <code class="python color1">None</code></div><div class="line number9 index8 alt2"><code class="python plain">final_result </code><code class="python keyword">=</code> <code class="python color1">None</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="python comments">#counts = trainingData.select('binary_response').groupBy('binary_response').count().collect()</code></div><div class="line number12 index11 alt1"><code class="python plain">highestBound </code><code class="python keyword">=</code> <code class="python plain">counts[</code><code class="python value">0</code><code class="python plain">][</code><code class="python value">1</code><code class="python plain">]</code></div><div class="line number13 index12 alt2"><code class="python plain">TRESHOLD_TO_FILTER </code><code class="python keyword">=</code> <code class="python functions">int</code><code class="python plain">(RATIO_ADJUST </code><code class="python keyword">*</code> <code class="python functions">float</code><code class="python plain">(counts[</code><code class="python value">1</code><code class="python plain">][</code><code class="python value">1</code><code class="python plain">]) </code><code class="python keyword">/</code> <code class="python plain">counts[</code><code class="python value">0</code><code class="python plain">][</code><code class="python value">1</code><code class="python plain">] </code><code class="python keyword">*</code> <code class="python plain">highestBound)</code></div><div class="line number14 index13 alt1"><code class="python comments">## UDF</code></div><div class="line number15 index14 alt2"><code class="python plain">randGen </code><code class="python keyword">=</code> <code class="python keyword">lambda</code> <code class="python plain">x: randint(</code><code class="python value">0</code><code class="python plain">, highestBound) </code><code class="python keyword">if</code> <code class="python plain">x </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python string">'Positive'</code> <code class="python keyword">else</code> <code class="python keyword">-</code><code class="python value">1</code></div><div class="line number16 index15 alt1"><code class="python plain">udfRandGen </code><code class="python keyword">=</code> <code class="python plain">udf(randGen, IntegerType())</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="python comments">## ensembling</code></div><div class="line number19 index18 alt2"><code class="python keyword">for</code> <code class="python plain">N </code><code class="python keyword">in</code> <code class="python functions">range</code><code class="python plain">(TOTAL_MODELS):</code></div><div class="line number20 index19 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Round: "</code><code class="python plain">, N)</code></div><div class="line number21 index20 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">trainingDataIndexed </code><code class="python keyword">=</code> <code class="python plain">trainingData.withColumn(</code><code class="python string">"randIndex"</code><code class="python plain">, udfRandGen(</code><code class="python string">"binary_response"</code><code class="python plain">))</code></div><div class="line number22 index21 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">df_subsample </code><code class="python keyword">=</code> <code class="python plain">trainingDataIndexed.</code><code class="python functions">filter</code><code class="python plain">(trainingDataIndexed[</code><code class="python string">'randIndex'</code><code class="python plain">] &lt; TRESHOLD_TO_FILTER).drop(</code><code class="python string">'randIndex'</code><code class="python plain">)</code></div><div class="line number23 index22 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments">## training and prediction</code></div><div class="line number24 index23 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">rf </code><code class="python keyword">=</code> <code class="python plain">RF(labelCol</code><code class="python keyword">=</code><code class="python string">'label'</code><code class="python plain">, featuresCol</code><code class="python keyword">=</code><code class="python string">'features'</code><code class="python plain">,numTrees</code><code class="python keyword">=</code><code class="python value">200</code><code class="python plain">)</code></div><div class="line number25 index24 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">fit </code><code class="python keyword">=</code> <code class="python plain">rf.fit(df_subsample)</code></div><div class="line number26 index25 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">transformed </code><code class="python keyword">=</code> <code class="python plain">fit.transform(testData)</code></div><div class="line number27 index26 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">result_pair </code><code class="python keyword">=</code> <code class="python plain">transformed.select([</code><code class="python string">'probability'</code><code class="python plain">, </code><code class="python string">'label'</code><code class="python plain">])</code></div><div class="line number28 index27 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">result_pair </code><code class="python keyword">=</code> <code class="python plain">result_pair.collect()</code></div><div class="line number29 index28 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">this_result </code><code class="python keyword">=</code> <code class="python plain">np.array([</code><code class="python functions">float</code><code class="python plain">(i[</code><code class="python value">0</code><code class="python plain">][</code><code class="python value">1</code><code class="python plain">]) </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">result_pair])</code></div><div class="line number30 index29 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">this_result </code><code class="python keyword">=</code> <code class="python functions">list</code><code class="python plain">(this_result.argsort().argsort() </code><code class="python keyword">/</code> <code class="python plain">(</code><code class="python functions">float</code><code class="python plain">(</code><code class="python functions">len</code><code class="python plain">(this_result) </code><code class="python keyword">+</code> <code class="python value">1</code><code class="python plain">)))</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments">## sum up all the predictions, and average to get final_result</code></div><div class="line number33 index32 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">if</code> <code class="python plain">total_results </code><code class="python keyword">is</code> <code class="python color1">None</code><code class="python plain">:</code></div><div class="line number34 index33 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">total_results </code><code class="python keyword">=</code> <code class="python plain">this_result</code></div><div class="line number35 index34 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">else</code><code class="python plain">:</code></div><div class="line number36 index35 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">total_results </code><code class="python keyword">=</code> <code class="python plain">[i</code><code class="python keyword">+</code><code class="python plain">j </code><code class="python keyword">for</code> <code class="python plain">i, j </code><code class="python keyword">in</code> <code class="python functions">zip</code><code class="python plain">(this_result, total_results)]</code></div><div class="line number37 index36 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">final_result </code><code class="python keyword">=</code> <code class="python plain">[i</code><code class="python keyword">/</code><code class="python plain">(N</code><code class="python keyword">+</code><code class="python value">1</code><code class="python plain">) </code><code class="python keyword">for</code> <code class="python plain">i </code><code class="python keyword">in</code> <code class="python plain">total_results]</code></div><div class="line number38 index37 alt1">&nbsp;</div><div class="line number39 index38 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">results_list </code><code class="python keyword">=</code> <code class="python plain">[(</code><code class="python functions">float</code><code class="python plain">(i), </code><code class="python functions">float</code><code class="python plain">(j[</code><code class="python value">1</code><code class="python plain">])) </code><code class="python keyword">for</code> <code class="python plain">i, j </code><code class="python keyword">in</code> <code class="python functions">zip</code><code class="python plain">(final_result, result_pair)]</code></div><div class="line number40 index39 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">scoreAndLabels </code><code class="python keyword">=</code> <code class="python plain">sc.parallelize(results_list)</code></div><div class="line number41 index40 alt2">&nbsp;</div><div class="line number42 index41 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">metrics </code><code class="python keyword">=</code> <code class="python plain">metric(scoreAndLabels)</code></div><div class="line number43 index42 alt2"><code class="python spaces">&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"The ROC score is (@numTrees=200): "</code><code class="python plain">, metrics.areaUnderROC)</code></div></div></td></tr></tbody></table></div></div>
<p><strong>Explanation</strong>: Basically, the algorithm is very similar to down-sampling: we are doing down-sampling multiple times and average the total results in terms of ranking! (meaning instead of raw predicted probabilities, for each round we rank the&nbsp;probabilities first and then take the average between rounds)</p>
<pre>Round:  0
The ROC score is (@numTrees=200):  0.6456296366007628
Round:  1
The ROC score is (@numTrees=200):  0.6475210701955153
Round:  2
The ROC score is (@numTrees=200):  0.6488169677072237
Round:  3
The ROC score is (@numTrees=200):  0.6490333812262444
Round:  4
The ROC score is (@numTrees=200):  0.6490997896881725
Round:  5
The ROC score is (@numTrees=200):  0.648347665785477
Round:  6
The ROC score is (@numTrees=200):  0.6486544723987375
Round:  7
The ROC score is (@numTrees=200):  0.6492410064530146
Round:  8
The ROC score is (@numTrees=200):  0.6493154941849306
Round:  9
The ROC score is (@numTrees=200):  0.6483560027574977</pre>
<p>The ensemble approach seems to give another boost to the AUC score!</p>
<p><em><strong>WARNING&nbsp;</strong>of using down- or up-sampling: If what&nbsp;you care is <strong>only the ROC</strong>, which measures the probability <strong>rankings</strong> of each case, rather than the <strong>actual probability</strong> of being Positive or Negative, it is ok&nbsp;to use subsampling methods.</em></p>
<p><em>However, &nbsp;if the actually probability matters to you, applying subsampling will distort the predicted probability distribution, and the actual probability might be wrong or over- / under-estimated.</em></p>
<h2>Other approach to handling unbalanced dataset</h2>
<p>Of course these&nbsp;are just the starting and sometimes naive approaches for handling unbalanced classes. There are some useful <a href="http://machinelearningmastery.com/tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/" target="_blank">blogs</a> or <a href="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=5128907&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5128907" target="_blank">paper </a>which talk about different strategies in greater details.</p>
<p>Alternately, you could try sklearn package’s Random Forest on PySpark&nbsp;which have class weight parameter to tune.</p>
<p>Leave a comment&nbsp;if you have questions or some&nbsp;ideas. :)</p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow" data-shared="sharing-twitter-630" class="share-twitter sd-button share-icon" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow" data-shared="sharing-facebook-630" class="share-facebook sd-button share-icon" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?share=facebook&amp;nb=1" target="_blank" title="Share on Facebook"><span>Facebook</span></a></li><li class="share-google-plus-1"><a rel="nofollow" data-shared="sharing-google-630" class="share-google-plus-1 sd-button share-icon" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?share=google-plus-1&amp;nb=1" target="_blank" title="Click to share on Google+"><span>Google</span></a></li><li class="share-email share-service-visible"><a rel="nofollow" data-shared="" class="share-email sd-button share-icon" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?share=email&amp;nb=1" target="_blank" title="Click to email"><span>Email</span></a></li><li class="share-linkedin"><a rel="nofollow" data-shared="sharing-linkedin-630" class="share-linkedin sd-button share-icon" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?share=linkedin&amp;nb=1" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-94048608-630-59c02175b6077" data-src="//widgets.wp.com/likes/#blog_id=94048608&amp;post_id=630&amp;origin=vanishingcodes.wordpress.com&amp;obj_id=94048608-630-59c02175b6077" data-name="like-post-frame-94048608-630-59c02175b6077"><h3 class="sd-title">Like this:</h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px; display: none;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-94048608-630-59c02175b6077" height="55px" width="100%" frameborder="0" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/saved_resource.html"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div></div>					</div><!-- .entry-content -->

		<footer class="entry-footer">
					</footer><!-- .entry-footer -->

			<div class="entry-author author-avatar-show">
				<div class="author-avatar">
			<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/77298e99d2797cf917fdddc6d6de46eb" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/77298e99d2797cf917fdddc6d6de46eb?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-77298e99d2797cf917fdddc6d6de46eb-0">		</div><!-- .author-avatar -->
		
		<div class="author-heading">
			<h2 class="author-title">Published by <span class="author-name">Weimin Wang</span></h2>
		</div><!-- .author-heading -->

		<p class="author-bio">
			Weimin has over 5 years working experience in Data Science and Machine Learning. His exposures cover drug discovery and research, transportation, property and marketing analytics and IT. And his main interests lie in Deep Learning. With expertise in TensorFlow, Keras and python, Weimin has built models for Video &amp; Image Detection, Time Series prediction, Sequence to sequence and Unsupervised models. He is currently working in Go-Jek Singapore as Data Science Lead, focusing on fraud detection, as well as supply &amp; demand forecast.			<a class="author-link" href="https://weiminwang.blog/author/vanishingcodes/" rel="author">
				View all posts by Weimin Wang			</a>
		</p><!-- .author-bio -->
	</div><!-- .entry-auhtor -->
	</div><!-- .entry-wrapper -->
</article><!-- #post-## -->

				<nav class="navigation post-navigation" role="navigation">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links">
			<div class="nav-previous"><a href="https://weiminwang.blog/2016/05/10/search-relevance-prediction-improving-home-depot-shoppers-experience/" rel="prev"><span class="post-nav" aria-hidden="true">Previous: </span> <span class="screen-reader-text">Previous post:</span> <span class="post-title">Search Relevance Prediction – Improving Online Shopping&nbsp;Experience</span></a></div><div class="nav-next"><a href="https://weiminwang.blog/2016/12/22/apply-machine-learning-to-email-campaign/" rel="next"><span class="post-nav" aria-hidden="true">Next: </span> <span class="screen-reader-text">Next post:</span> <span class="post-title">Apply Machine Learning to Email&nbsp;Campaign</span></a></div>		</div><!-- .nav-links -->
	</nav><!-- .navigation -->
	
			
<div id="comments" class="comments-area">

	
			<h2 class="comments-title">
			13 thoughts on “<span>PySpark tutorial – a case study using Random Forest on unbalanced&nbsp;dataset</span>”		</h2>

		
		<ol class="comment-list">
					<li id="comment-24" class="comment byuser comment-author-chandrakant721 even thread-even depth-1 parent highlander-comment">
			<article id="div-comment-24" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/290bd23953d9ffdb414c1a7d6d9e3242" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" id="grav-290bd23953d9ffdb414c1a7d6d9e3242-0" originals="50" src-orig="https://2.gravatar.com/avatar/290bd23953d9ffdb414c1a7d6d9e3242?s=50&amp;d=identicon&amp;r=G" scale="2">						<b class="fn"><a href="http://chandrakant721.wordpress.com/" rel="external nofollow" class="url">chandrakant721</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-24">
							<time datetime="2016-08-10T15:21:10+00:00">
								August 10, 2016 at 3:21 pm							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Can you share the sample data in a link so that we can run the exercise on our own. Thanks in advance.</p>
<p id="comment-like-24" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=24&amp;_wpnonce=fa0f3d4bec" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-24" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=24#respond" onclick="return addComment.moveForm( &quot;div-comment-24&quot;, &quot;24&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to chandrakant721">Reply</a></div>			</article><!-- .comment-body -->
<ol class="children">
		<li id="comment-25" class="comment byuser comment-author-vanishingcodes bypostauthor odd alt depth-2 highlander-comment">
			<article id="div-comment-25" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/77298e99d2797cf917fdddc6d6de46eb" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/77298e99d2797cf917fdddc6d6de46eb?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-77298e99d2797cf917fdddc6d6de46eb-1">						<b class="fn"><a href="https://vanishingcodes.wordpress.com/" rel="external nofollow" class="url">Weimin Wang</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-25">
							<time datetime="2016-08-11T00:21:19+00:00">
								August 11, 2016 at 12:21 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>The original data is our proprietary data, whereas the outputs shown inside the tutorial are masked so that both its values and names are fake, only for demonstrate purpose.<br>
Therefore am sorry to say I don’t have a sample data to show at the moment. </p>
<p id="comment-like-25" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=25&amp;_wpnonce=423d258b76" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-25" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=25#respond" onclick="return addComment.moveForm( &quot;div-comment-25&quot;, &quot;25&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to Weimin Wang">Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li id="comment-27" class="comment even thread-odd thread-alt depth-1 parent highlander-comment">
			<article id="div-comment-27" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/c74bd3ac4e3d3296fe988dfd828b5b06" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://0.gravatar.com/avatar/c74bd3ac4e3d3296fe988dfd828b5b06?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-c74bd3ac4e3d3296fe988dfd828b5b06-0">						<b class="fn">Kenny</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-27">
							<time datetime="2016-09-10T05:30:06+00:00">
								September 10, 2016 at 5:30 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Hello,<br>
Very informative article. Can you also share how to get the Variable Importance from RF? Thanks</p>
<p id="comment-like-27" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=27&amp;_wpnonce=d364103619" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-27" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=27#respond" onclick="return addComment.moveForm( &quot;div-comment-27&quot;, &quot;27&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to Kenny">Reply</a></div>			</article><!-- .comment-body -->
<ol class="children">
		<li id="comment-30" class="comment byuser comment-author-vanishingcodes bypostauthor odd alt depth-2 highlander-comment">
			<article id="div-comment-30" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/77298e99d2797cf917fdddc6d6de46eb" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/77298e99d2797cf917fdddc6d6de46eb?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-77298e99d2797cf917fdddc6d6de46eb-2">						<b class="fn"><a href="https://vanishingcodes.wordpress.com/" rel="external nofollow" class="url">Weimin Wang</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-30">
							<time datetime="2016-09-16T02:51:04+00:00">
								September 16, 2016 at 2:51 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Hi,<br>
Sorry as far as I know feature importance is not implemented in PySpark for random forest. </p>
<p id="comment-like-30" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=30&amp;_wpnonce=2518c3bd12" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-30" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=30#respond" onclick="return addComment.moveForm( &quot;div-comment-30&quot;, &quot;30&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to Weimin Wang">Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li id="comment-33" class="comment even thread-even depth-1 parent highlander-comment">
			<article id="div-comment-33" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/a2acde10d055345aa95a77059d444781" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/a2acde10d055345aa95a77059d444781?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-a2acde10d055345aa95a77059d444781-0">						<b class="fn">Ashwanth D Kumar</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-33">
							<time datetime="2016-09-27T09:30:29+00:00">
								September 27, 2016 at 9:30 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>for x,y in zip(column_vec_in, column_vec_out)]<br>
TypeError: __init__() got an unexpected keyword argument ‘outputCol’…………….. Facing this error while implementing the One-hot encoding technique</p>
<p id="comment-like-33" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=33&amp;_wpnonce=26fe4470ab" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-33" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=33#respond" onclick="return addComment.moveForm( &quot;div-comment-33&quot;, &quot;33&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to Ashwanth D Kumar">Reply</a></div>			</article><!-- .comment-body -->
<ol class="children">
		<li id="comment-38" class="comment byuser comment-author-vanishingcodes bypostauthor odd alt depth-2 parent highlander-comment">
			<article id="div-comment-38" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/77298e99d2797cf917fdddc6d6de46eb" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/77298e99d2797cf917fdddc6d6de46eb?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-77298e99d2797cf917fdddc6d6de46eb-3">						<b class="fn"><a href="https://vanishingcodes.wordpress.com/" rel="external nofollow" class="url">Weimin Wang</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-38">
							<time datetime="2016-09-29T00:52:59+00:00">
								September 29, 2016 at 12:52 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>You should run the complete line “encoders = [OneHotEncoder(dropLast=False, inputCol=x+”_tmp”, outputCol=y)<br>
for x,y in zip(column_vec_in, column_vec_out)]”</p>
<p>instead of part of it I guess</p>
<p id="comment-like-38" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=38&amp;_wpnonce=970364089f" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-38" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=38#respond" onclick="return addComment.moveForm( &quot;div-comment-38&quot;, &quot;38&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to Weimin Wang">Reply</a></div>			</article><!-- .comment-body -->
<ol class="children">
		<li id="comment-40" class="comment even depth-3 parent highlander-comment">
			<article id="div-comment-40" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/a2acde10d055345aa95a77059d444781" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/a2acde10d055345aa95a77059d444781?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-a2acde10d055345aa95a77059d444781-1">						<b class="fn">Ashwanth D Kumar</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-40">
							<time datetime="2016-09-29T06:02:08+00:00">
								September 29, 2016 at 6:02 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>column_vec_in = [‘business_type’]<br>
    column_vec_out = [‘business_type_Vec’]</p>
<p>    indexers = [StringIndexer(inputCol=x, outputCol=x + ‘_tmp’)<br>
                for x in column_vec_in]</p>
<p>    encoders = [OneHotEncoder(dropLast=False, inputCol=x + “_tmp”, outputCol=y)<br>
                for x, y in zip(column_vec_in, column_vec_out)]<br>
    tmp = [[i, j] for i, j in zip(indexers, encoders)]<br>
    tmp = [i for sublist in tmp for i in sublist]</p>
<p>    cols_now = [‘business_type_Vec’]<br>
    assembler_features = VectorAssembler(inputCols=cols_now, outputCol=’features’)<br>
    labelIndexer = StringIndexer(inputCol=’binary_response’, outputCol=”label”)<br>
    tmp += [assembler_features, labelIndexer]<br>
    pipeline = Pipeline(stages=tmp)</p>
<p>I just Implemented as you implemented. How can Iook into the new dataframes which has dummy columns also.</p>
<p id="comment-like-40" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=40&amp;_wpnonce=666fae0fb6" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-40" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

							</article><!-- .comment-body -->
</li><!-- #comment-## -->
		<li id="comment-43" class="comment byuser comment-author-vanishingcodes bypostauthor odd alt depth-3 highlander-comment">
			<article id="div-comment-43" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/77298e99d2797cf917fdddc6d6de46eb" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/77298e99d2797cf917fdddc6d6de46eb?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-77298e99d2797cf917fdddc6d6de46eb-4">						<b class="fn"><a href="https://vanishingcodes.wordpress.com/" rel="external nofollow" class="url">Weimin Wang</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-43">
							<time datetime="2016-10-20T13:41:32+00:00">
								October 20, 2016 at 1:41 pm							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>You have created the pipeline but not yet fit it onto your df. running: allData = pipeline.fit(df).transform(df)<br>
will fit onto your df and create the new sparse dataframe allData which has the one-hot cols.</p>
<p id="comment-like-43" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=43&amp;_wpnonce=8afed6eda6" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-43" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

							</article><!-- .comment-body -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li id="comment-35" class="comment byuser comment-author-jypucca even thread-odd thread-alt depth-1 highlander-comment">
			<article id="div-comment-35" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/a4af3dbb9b57d2e33c03353c41d927fd" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/a4af3dbb9b57d2e33c03353c41d927fd?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-a4af3dbb9b57d2e33c03353c41d927fd-0">						<b class="fn"><a href="http://jennyyuart.com/" rel="external nofollow" class="url">Jenny</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-35">
							<time datetime="2016-09-28T17:40:05+00:00">
								September 28, 2016 at 5:40 pm							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Thank you for sharing this, I was trying to figure out a way to group categorical AND numerical columns together using vectorassembler. And your code worked perfectly!</p>
<p id="comment-like-35" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=35&amp;_wpnonce=16b59a5779" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-35" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=35#respond" onclick="return addComment.moveForm( &quot;div-comment-35&quot;, &quot;35&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to Jenny">Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
		<li id="comment-36" class="comment byuser comment-author-jypucca odd alt thread-even depth-1 parent highlander-comment">
			<article id="div-comment-36" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/a4af3dbb9b57d2e33c03353c41d927fd" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/a4af3dbb9b57d2e33c03353c41d927fd?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-a4af3dbb9b57d2e33c03353c41d927fd-1">						<b class="fn"><a href="http://jennyyuart.com/" rel="external nofollow" class="url">Jenny</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-36">
							<time datetime="2016-09-28T18:04:49+00:00">
								September 28, 2016 at 6:04 pm							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Hi Weimin:</p>
<p> I do have a question regarding the process you use for OneHotEncoding and building the pipeline. Specifically, can you explain what these two lines do (can’t find it on Spark documentation):</p>
<p>tmp = [[i,j] for i,j in zip(indexers, encoders)]<br>
tmp = [i for sublist in tmp for i in sublist]</p>
<p>In your code, it looks like these two lines serve as reference for the “tmp += [assembler_features, labelIndexer]” , and the ‘sublist’ is each row of the dataframe after it’s been indexed and encoded? I’m a bit confused about the order of execution of these lines, since i don’t see the .transform() on the encoder and indexer commands. </p>
<p>Thanks!</p>
<p id="comment-like-36" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=36&amp;_wpnonce=971bc354f3" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-36" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=36#respond" onclick="return addComment.moveForm( &quot;div-comment-36&quot;, &quot;36&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to Jenny">Reply</a></div>			</article><!-- .comment-body -->
<ol class="children">
		<li id="comment-39" class="comment byuser comment-author-vanishingcodes bypostauthor even depth-2 parent highlander-comment">
			<article id="div-comment-39" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/77298e99d2797cf917fdddc6d6de46eb" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/77298e99d2797cf917fdddc6d6de46eb?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-77298e99d2797cf917fdddc6d6de46eb-5">						<b class="fn"><a href="https://vanishingcodes.wordpress.com/" rel="external nofollow" class="url">Weimin Wang</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-39">
							<time datetime="2016-09-29T00:55:44+00:00">
								September 29, 2016 at 12:55 am							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Hi Jenny, </p>
<p>It’s a bit python trick I applied by reference to this:</p>
<p><a href="http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python" rel="nofollow">http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python</a></p>
<p>Basically, I am trying to make tmp a flat list instead of list of lists, so  “tmp = [i for sublist in tmp for i in sublist]” will flatten it.</p>
<p id="comment-like-39" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=39&amp;_wpnonce=ff9beae4ac" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-39" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=39#respond" onclick="return addComment.moveForm( &quot;div-comment-39&quot;, &quot;39&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to Weimin Wang">Reply</a></div>			</article><!-- .comment-body -->
<ol class="children">
		<li id="comment-41" class="comment byuser comment-author-jypucca odd alt depth-3 highlander-comment">
			<article id="div-comment-41" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/a4af3dbb9b57d2e33c03353c41d927fd" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://1.gravatar.com/avatar/a4af3dbb9b57d2e33c03353c41d927fd?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-a4af3dbb9b57d2e33c03353c41d927fd-2">						<b class="fn"><a href="http://jennyyuart.com/" rel="external nofollow" class="url">Jenny</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-41">
							<time datetime="2016-09-29T15:41:37+00:00">
								September 29, 2016 at 3:41 pm							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Thanks for the explanation!</p>
<p id="comment-like-41" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=41&amp;_wpnonce=6610d09ba2" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-41" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

							</article><!-- .comment-body -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li id="comment-51" class="comment even thread-odd thread-alt depth-1 highlander-comment">
			<article id="div-comment-51" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/9c3fd7a6672a51dc855a71b7d3548cf3" class="avatar avatar-50 grav-hashed grav-hijack" height="50" width="50" originals="50" src-orig="https://0.gravatar.com/avatar/9c3fd7a6672a51dc855a71b7d3548cf3?s=50&amp;d=identicon&amp;r=G" scale="2" id="grav-9c3fd7a6672a51dc855a71b7d3548cf3-0">						<b class="fn">Rob</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-51">
							<time datetime="2017-03-15T18:46:50+00:00">
								March 15, 2017 at 6:46 pm							</time>
						</a>
											</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>I’m trying to scale this for multi-class classification.</p>
<p>I have used a StringIndexer for the output column like so..<br>
labelIndexer = StringIndexer(inputCol=’multi_response’, outputCol=”label”)</p>
<p>I seem to be always getting a binary prediction…</p>
<p>Thoughts on what I might be missing?</p>
<p id="comment-like-51" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?like_comment=51&amp;_wpnonce=48dd579f51" class="comment-like-link needs-login" rel="nofollow" data-blog="94048608"><span>Like</span></a><span id="comment-like-count-51" class="comment-like-feedback">Like</span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/?replytocom=51#respond" onclick="return addComment.moveForm( &quot;div-comment-51&quot;, &quot;51&quot;, &quot;respond&quot;, &quot;630&quot; )" aria-label="Reply to Rob">Reply</a></div>			</article><!-- .comment-body -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://weiminwang.blog/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate="">
				<input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="163c555ba3"><input type="hidden" name="_wp_http_referer" value="/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea tabindex="-1" style="position: absolute; top: -999px; left: 0px; right: auto; bottom: auto; border: 0px; padding: 0px; box-sizing: content-box; word-wrap: break-word; overflow: hidden; transition: none; height: 0px !important; min-height: 0px !important; font-family: Arial, Helvetica, Tahoma, Verdana, sans-serif; font-size: 14px; font-weight: 400; font-style: normal; letter-spacing: 0px; text-transform: none; text-decoration: none solid rgba(0, 0, 0, 0.7); word-spacing: 0px; text-indent: 0px; line-height: 21px; width: 706px;" class="autosizejs "></textarea><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="height: 41px; overflow: hidden; word-wrap: break-word; resize: none;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">

	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-form-guest" id="postas-guest" title="Guest">
					<span></span>
				</a>
			</li>
			<li>
				<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-form-load-service:WordPress.com" id="postas-wordpress" title="WordPress.com">
					<span></span>
				</a>
			</li>
			<li>
				<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-form-load-service:Twitter" id="postas-twitter" title="Twitter">
					<span></span>
				</a>
			</li>
			<li>
				<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#comment-form-load-service:Facebook" id="postas-facebook" title="Facebook">
					<span></span>
				</a>
			</li>
			<li>
		</li></ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/ad516503a11cd5ca435acc9bb6523536" alt="Gravatar" width="25" class="no-grav" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="2">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
	
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/ad516503a11cd5ca435acc9bb6523536(1)" alt="WordPress.com Logo" width="25" class="no-grav" originals="25" scale="2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
				<p class="comment-form-posting-as pa-wordpress"><strong></strong> You are commenting using your WordPress.com account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( &#39;wordpress&#39; );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/ad516503a11cd5ca435acc9bb6523536(1)" alt="Twitter picture" width="25" class="no-grav" originals="25" scale="2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
				<p class="comment-form-posting-as pa-twitter"><strong></strong> You are commenting using your Twitter account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( &#39;twitter&#39; );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/ad516503a11cd5ca435acc9bb6523536(1)" alt="Facebook photo" width="25" class="no-grav" originals="25" scale="2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
				<p class="comment-form-posting-as pa-facebook"><strong></strong> You are commenting using your Facebook account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( &#39;facebook&#39; );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-googleplus" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/ad516503a11cd5ca435acc9bb6523536(1)" alt="Google+ photo" width="25" class="no-grav" originals="25" scale="2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="googleplus_avatar" id="googleplus-avatar" class="comment-meta-googleplus" value="">
				<input type="hidden" name="googleplus_user_id" id="googleplus-user_id" class="comment-meta-googleplus" value="">
				<input type="hidden" name="googleplus_access_token" id="googleplus-access_token" class="comment-meta-googleplus" value="">
				<p class="comment-form-posting-as pa-googleplus"><strong></strong> You are commenting using your Google+ account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( &#39;googleplus&#39; );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function(){
	var input = document.createElement( 'input' ),
	    comment = jQuery( '#comment' );

	if ( 'placeholder' in input ) {
		comment.attr( 'placeholder', jQuery( '.comment-textarea label' ).remove().text() );
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	jQuery( '#comment-form-identity' ).hide();
	jQuery( '#comment-form-subscribe' ).hide();
	jQuery( '#commentform .form-submit' ).hide();

	comment.css( { 'height':'10px' } ).one( 'focus', function() {
		var timer = setInterval( HighlanderComments.resizeCallback, 10 )
		jQuery( this ).animate( { 'height': HighlanderComments.initialHeight } ).delay( 100 ).queue( function(n) { clearInterval( timer ); HighlanderComments.resizeCallback(); n(); } );
		jQuery( '#comment-form-identity' ).slideDown();
		jQuery( '#comment-form-subscribe' ).slideDown();
		jQuery( '#commentform .form-submit' ).slideDown();
	});
}
jQuery(document).ready( highlander_expando_javascript );
</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p></div>




<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="630" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="3dcc068b85"></p>
<input type="hidden" name="genseq" value="1505763701">
<p style="display: none;"></p>			<input type="hidden" id="ak_js" name="ak_js" value="1505763777304"></form>
			</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

	<div id="secondary" class="sidebar" role="complementary">
				
		
					<div class="widget-area">
				<aside id="search-2" class="widget widget_search"><form role="search" method="get" class="search-form" action="https://weiminwang.blog/">
				<label>
					<span class="screen-reader-text">Search for:</span>
					<input type="search" class="search-field" placeholder="Search …" value="" name="s">
				</label>
				<input type="submit" class="search-submit screen-reader-text" value="Search">
			</form></aside>		<aside id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widget-title">Recent Posts</h2>		<ul>
					<li>
				<a href="https://weiminwang.blog/2017/09/12/introductory-guide-to-tensorflow-serving/">Introductory Tutorial to TensorFlow&nbsp;Serving</a>
						</li>
					<li>
				<a href="https://weiminwang.blog/2017/08/05/credit-card-fraud-detection-2-using-restricted-boltzmann-machine-in-tensorflow/">Credit card fraud detection 2 – using Restricted Boltzmann Machine in&nbsp;TensorFlow</a>
						</li>
					<li>
				<a href="https://weiminwang.blog/2017/06/23/credit-card-fraud-detection-using-auto-encoder-in-tensorflow-2/">Credit card fraud detection 1 – using auto-encoder in&nbsp;TensorFlow</a>
						</li>
					<li>
				<a href="https://weiminwang.blog/2017/03/20/using-tensorflow-to-build-image-to-text-deep-learning-application/">Using TensorFlow to build image-to-text&nbsp;application</a>
						</li>
					<li>
				<a href="https://weiminwang.blog/2016/12/22/apply-machine-learning-to-email-campaign/">Apply Machine Learning to Email&nbsp;Campaign</a>
						</li>
				</ul>
		</aside>					</div><!-- #secondary -->
			</div>

	</div><!-- #content -->
	<footer id="colophon" class="site-footer" role="contentinfo">
		<div class="site-info">
			<a href="https://wordpress.com/?ref=footer_blog">Blog at WordPress.com.</a>
			
						
			<span class="footer-name"><a href="https://weiminwang.blog/" rel="home">Weimin Wang</a></span>
		</div><!-- .site-info -->
	</footer><!-- #colophon -->
</div><!-- #page -->

<!--  -->
<script type="text/javascript" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/gprofiles.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type="text/javascript" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/wpgroho.js"></script>

	<script>
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {

			if (typeof Gravatar === "undefined"){
				return;
			}

			if ( typeof Gravatar.init !== "function" ) {
				return;
			}			

			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	</script>

		<div style="display:none">
	<div class="grofile-hash-map-77298e99d2797cf917fdddc6d6de46eb">
	</div>
	<div class="grofile-hash-map-290bd23953d9ffdb414c1a7d6d9e3242">
	</div>
	<div class="grofile-hash-map-77298e99d2797cf917fdddc6d6de46eb">
	</div>
	<div class="grofile-hash-map-c74bd3ac4e3d3296fe988dfd828b5b06">
	</div>
	<div class="grofile-hash-map-a2acde10d055345aa95a77059d444781">
	</div>
	<div class="grofile-hash-map-a4af3dbb9b57d2e33c03353c41d927fd">
	</div>
	<div class="grofile-hash-map-9c3fd7a6672a51dc855a71b7d3548cf3">
	</div>
	</div>
<script type="text/javascript">
/* <![CDATA[ */
var HighlanderComments = {"loggingInText":"Logging In\u2026","submittingText":"Posting Comment\u2026","postCommentText":"Post Comment","connectingToText":"Connecting to %s","commentingAsText":"%1$s: You are commenting using your %2$s account.","logoutText":"Log Out","loginText":"Log In","connectURL":"https:\/\/vanishingcodes.wordpress.com\/public.api\/connect\/?action=request","logoutURL":"https:\/\/vanishingcodes.wordpress.com\/wp-login.php?action=logout&_wpnonce=9ef78545bb","homeURL":"https:\/\/weiminwang.blog\/","postID":"630","gravDefault":"identicon","enterACommentError":"Please enter a comment","enterEmailError":"Please enter your email address here","invalidEmailError":"Invalid email address","enterAuthorError":"Please enter your name here","gravatarFromEmail":"This picture will show whenever you leave a comment. Click to customize it.","logInToExternalAccount":"Log in to use details from one of these accounts.","change":"Change","changeAccount":"Change Account","comment_registration":"0","userIsLoggedIn":"","isJetpack":"0","text_direction":"ltr"};
/* ]]> */
</script>
<script type="text/javascript" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/saved_resource(4)"></script>

	<div id="carousel-reblog-box">
		<form action="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#" name="carousel-reblog">
			<textarea id="carousel-reblog-content" name="carousel-reblog-content" placeholder="Add your thoughts here... (optional)"></textarea>
			<label for="carousel-reblog-to-blog-id" id="carousel-reblog-lblogid">Post to</label>
			<select name="carousel-reblog-to-blog-id" id="carousel-reblog-to-blog-id">
						</select>

			<div class="submit">
				<span class="canceltext"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#" class="cancel">Cancel</a></span>
				<input type="submit" name="carousel-reblog-submit" class="button" id="carousel-reblog-submit" value="Reblog Post">
				<input type="hidden" id="carousel-reblog-blog-id" value="94048608">
				<input type="hidden" id="carousel-reblog-blog-url" value="https://weiminwang.blog">
				<input type="hidden" id="carousel-reblog-blog-title" value="Weimin Wang">
				<input type="hidden" id="carousel-reblog-post-url" value="">
				<input type="hidden" id="carousel-reblog-post-title" value="">
			</div>

			<input type="hidden" id="_wpnonce" name="_wpnonce" value="4a10b8cc8d"><input type="hidden" name="_wp_http_referer" value="/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/">		</form>

		<div class="arrow"></div>
	</div>

	<script type="text/javascript">
		window.WPCOM_sharing_counts = {"https:\/\/weiminwang.blog\/2016\/06\/09\/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset\/":630};
	</script>
		<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-google-plus-1' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomgoogle-plus-1', 'menubar=1,resizable=1,width=480,height=550' );
				return false;
			});
		});
		</script>
			
		<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-linkedin' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomlinkedin', 'menubar=1,resizable=1,width=580,height=450' );
				return false;
			});
		});
		</script>
		<script type="text/javascript" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/saved_resource(5)"></script>
<script type="text/javascript">
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "https://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?m=1363304414h&amp;ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

// Infinite scroll support
jQuery( function( $ ) {
	$( document.body ).on( 'post-load', function() {
		SyntaxHighlighter.highlight();
	} );
} );
</script>
<link rel="stylesheet" id="all-css-0-3" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/jetpack-carousel.css" type="text/css" media="all">
<!--[if lte IE 8]>
<link rel='stylesheet' id='jetpack-carousel-ie8fix-css'  href='https://s1.wp.com/wp-content/mu-plugins/carousel/jetpack-carousel-ie8fix.css?m=1412618825h&#038;ver=20121024' type='text/css' media='all' />
<![endif]-->
<link rel="stylesheet" id="all-css-2-3" href="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/tiled-gallery.css" type="text/css" media="all">
<script type="text/javascript">
/* <![CDATA[ */
var comment_like_text = {"loading":"Loading..."};
/* ]]> */
</script>
<script type="text/javascript">
/* <![CDATA[ */
var actionbardata = {"siteID":"94048608","siteName":"Weimin Wang","siteURL":"https:\/\/weiminwang.blog","icon":"<img alt='' src='https:\/\/s1.wp.com\/i\/logo\/wpcom-gray-white.png' class='avatar avatar-50' height='50' width='50' \/>","canManageOptions":"","canCustomizeSite":"","isFollowing":"","themeSlug":"pub\/sapor","signupURL":"https:\/\/wordpress.com\/start\/","loginURL":"https:\/\/vanishingcodes.wordpress.com\/wp-login.php?redirect_to=https%3A%2F%2Fweiminwang.blog%2F2016%2F06%2F09%2Fpyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset%2F","themeURL":"https:\/\/wordpress.com\/theme\/sapor\/","xhrURL":"https:\/\/weiminwang.blog\/wp-admin\/admin-ajax.php","nonce":"2051b5f674","isSingular":"1","isFolded":"","isLoggedIn":"","isMobile":"","subscribeNonce":"<input type=\"hidden\" id=\"_wpnonce\" name=\"_wpnonce\" value=\"fa06cc5107\" \/>","referer":"https:\/\/weiminwang.blog\/2016\/06\/09\/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset\/","canFollow":"1","feedID":"62955485","statusMessage":"","customizeLink":"https:\/\/vanishingcodes.wordpress.com\/wp-admin\/customize.php?url=https%3A%2F%2Fvanishingcodes.wordpress.com%2F2016%2F06%2F09%2Fpyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset%2F","postID":"630","shortlink":"http:\/\/wp.me\/p6mCl2-aa","canEditPost":"","editLink":"https:\/\/wordpress.com\/post\/weiminwang.blog\/630","statsLink":"https:\/\/wordpress.com\/stats\/post\/630\/weiminwang.blog","i18n":{"view":"View site","follow":"Follow","following":"Following","edit":"Edit","login":"Log in","signup":"Sign up","customize":"Customize","report":"Report this content","themeInfo":"Get theme: Sapor","shortlink":"Copy shortlink","copied":"Copied","followedText":"New posts from this site will now appear in your <a href=\"https:\/\/wordpress.com\/\">Reader<\/a>","foldBar":"Collapse this bar","unfoldBar":"Expand this bar","editSubs":"Manage subscriptions","viewReader":"View site in Reader","viewReadPost":"View post in Reader","subscribe":"Sign me up","enterEmail":"Enter your email address","followers":"","alreadyUser":"Already have a WordPress.com account? <a href=\"https:\/\/vanishingcodes.wordpress.com\/wp-login.php?redirect_to=https%3A%2F%2Fweiminwang.blog%2F2016%2F06%2F09%2Fpyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset%2F\">Log in now.<\/a>","stats":"Stats"}};
/* ]]> */
</script>
<script type="text/javascript">
/* <![CDATA[ */
var jetpackCarouselStrings = {"widths":[370,700,1000,1200,1400,2000],"is_logged_in":"","lang":"en","ajaxurl":"https:\/\/weiminwang.blog\/wp-admin\/admin-ajax.php","nonce":"cd7b3df74a","display_exif":"1","display_geo":"1","single_image_gallery":"1","single_image_gallery_media_file":"","background_color":"black","comment":"Comment","post_comment":"Post Comment","write_comment":"Write a Comment...","loading_comments":"Loading Comments...","download_original":"View full size <span class=\"photo-size\">{0}<span class=\"photo-size-times\">\u00d7<\/span>{1}<\/span>","no_comment_text":"Please be sure to submit some text with your comment.","no_comment_email":"Please provide an email address to comment.","no_comment_author":"Please provide your name to comment.","comment_post_error":"Sorry, but there was an error posting your comment. Please try again later.","comment_approved":"Your comment was approved.","comment_unapproved":"Your comment is in moderation.","camera":"Camera","aperture":"Aperture","shutter_speed":"Shutter Speed","focal_length":"Focal Length","comment_registration":"0","require_name_email":"1","login_url":"https:\/\/vanishingcodes.wordpress.com\/wp-login.php?redirect_to=https%3A%2F%2Fweiminwang.blog%2F2016%2F06%2F09%2Fpyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset%2F","blog_id":"94048608","local_comments_commenting_as":"<fieldset><label for=\"email\">Email (Required)<\/label> <input type=\"text\" name=\"email\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-email-field\" \/><\/fieldset><fieldset><label for=\"author\">Name (Required)<\/label> <input type=\"text\" name=\"author\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-author-field\" \/><\/fieldset><fieldset><label for=\"url\">Website<\/label> <input type=\"text\" name=\"url\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-url-field\" \/><\/fieldset>","reblog":"Reblog","reblogged":"Reblogged","reblog_add_thoughts":"Add your thoughts here... (optional)","reblogging":"Reblogging...","post_reblog":"Post Reblog","stats_query_args":"blog=94048608&v=wpcom&tz=0&user_id=0&subd=vanishingcodes","is_public":"1","reblog_enabled":""};
/* ]]> */
</script>
<script type="text/javascript">
/* <![CDATA[ */
var sharing_js_options = {"lang":"en","counts":"1"};
/* ]]> */
</script>
<script type="text/javascript" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/saved_resource(6)"></script><div id="actionbar" class="actnbr-pub-sapor actnbr-has-follow actnbr-hidden"><ul><li class="actnbr-btn actnbr-hidden"> 			    	<a class="actnbr-action actnbr-actn-follow" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/"><svg class="gridicon gridicon__follow" height="24px" width="24px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><path d="M23 16v2h-3v3h-2v-3h-3v-2h3v-3h2v3h3zM20 2v9h-4v3h-3v4H4c-1.1 0-2-.9-2-2V2h18zM8 13v-1H4v1h4zm3-3H4v1h7v-1zm0-2H4v1h7V8zm7-4H4v2h14V4z"></path></g></svg><span>Follow</span></a> 			    	<div class="actnbr-popover tip tip-top-left actnbr-notice"> 			    		<div class="tip-arrow"></div> 			    		<div class="tip-inner actnbr-follow-bubble"></div> 			    	</div> 			    </li><li class="actnbr-ellipsis actnbr-hidden"> 			  <svg class="gridicon gridicon__ellipsis" height="24" width="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><circle cx="5" cy="12" r="2"></circle><circle cx="19" cy="12" r="2"></circle><circle cx="12" cy="12" r="2"></circle></g></svg> 			  <div class="actnbr-popover tip tip-top-left actnbr-more"> 			  	<div class="tip-arrow"></div> 			  	<div class="tip-inner"> 				  <ul> 				    <li class="actnbr-sitename actnbr-hidden"><a href="https://weiminwang.blog/"><img alt="" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/wpcom-gray-white.png" class="avatar avatar-50" height="50" width="50" scale="0"> Weimin Wang</a></li> 				   	<li class="actnbr-folded-customize actnbr-hidden"><a href="https://vanishingcodes.wordpress.com/wp-admin/customize.php?url=https%3A%2F%2Fvanishingcodes.wordpress.com%2F2016%2F06%2F09%2Fpyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset%2F"><svg class="gridicon gridicon__customize" height="20px" width="20px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><path d="M2 6c0-1.505.78-3.08 2-4 0 .845.69 2 2 2 1.657 0 3 1.343 3 3 0 .386-.08.752-.212 1.09.74.594 1.476 1.19 2.19 1.81L8.9 11.98c-.62-.716-1.214-1.454-1.807-2.192C6.753 9.92 6.387 10 6 10c-2.21 0-4-1.79-4-4zm12.152 6.848l1.34-1.34c.607.304 1.283.492 2.008.492 2.485 0 4.5-2.015 4.5-4.5 0-.725-.188-1.4-.493-2.007L18 9l-2-2 3.507-3.507C18.9 3.188 18.225 3 17.5 3 15.015 3 13 5.015 13 7.5c0 .725.188 1.4.493 2.007L3 20l2 2 6.848-6.848c1.885 1.928 3.874 3.753 5.977 5.45l1.425 1.148 1.5-1.5-1.15-1.425c-1.695-2.103-3.52-4.092-5.448-5.977z" data-reactid=".2.1.1:0.1b.0"></path></g></svg><span>Customize<span></span></span></a></li> 				    <li class="actnbr-folded-follow actnbr-hidden"><a class="actnbr-action actnbr-actn-follow" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/"><svg class="gridicon gridicon__follow" height="24px" width="24px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><path d="M23 16v2h-3v3h-2v-3h-3v-2h3v-3h2v3h3zM20 2v9h-4v3h-3v4H4c-1.1 0-2-.9-2-2V2h18zM8 13v-1H4v1h4zm3-3H4v1h7v-1zm0-2H4v1h7V8zm7-4H4v2h14V4z"></path></g></svg><span>Follow</span></a></li> 					<li class="actnbr-signup actnbr-hidden"><a href="https://wordpress.com/start/">Sign up</a></li> 				    <li class="actnbr-login actnbr-hidden"><a href="https://vanishingcodes.wordpress.com/wp-login.php?redirect_to=https%3A%2F%2Fweiminwang.blog%2F2016%2F06%2F09%2Fpyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset%2F">Log in</a></li> 				     				    <li class="actnbr-shortlink actnbr-hidden"><a href="http://wp.me/p6mCl2-aa">Copy shortlink</a></li> 				    <li class="flb-report actnbr-hidden"><a href="http://en.wordpress.com/abuse/">Report this content</a></li> 				     				     				    <li class="actnbr-subs actnbr-hidden"><a href="https://subscribe.wordpress.com/">Manage subscriptions</a></li> 				    <li class="actnbr-fold actnbr-hidden"><a href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/">Collapse this bar</a></li> 			      </ul> 			    </div> 		      </div> 		    </li> 	      </ul></div>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script>		<iframe src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/master.html" scrolling="no" id="likes-master" name="likes-master" style="display:none;"></iframe>
		<div id="likes-other-gravatars"><div class="likes-text"><span>%d</span> bloggers like this:</div><ul class="wpl-avatars sd-like-gravatars"></ul></div>
<script src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/w.js" type="text/javascript" async="" defer=""></script>
<script type="text/javascript">
_tkq = window._tkq || [];
_stq = window._stq || [];
_tkq.push(['storeContext', {'blog_id':'94048608','blog_tz':'0','user_lang':'en','blog_lang':'en','user_id':'0'}]);
_stq.push(['view', {'blog':'94048608','v':'wpcom','tz':'0','user_id':'0','post':'630','subd':'vanishingcodes'}]);
_stq.push(['extra', {'crypt':'UE40eW5QN0p8M2Y/RE1TaVhzUzFMbjdWNHpwZGhTayxPSUFCMGNrd29+Smw0TDhnZmRTK0hlRi9QSGh6bi9GXVhBJWIlZlR5U1JMLU8/MkNtblkvY1dDRWxEMFBzcnp0d3V2UVpuRncmQ0EmSHBQOFMxYV9ZOXBtY3FqZ0Y9JWowRnp3REFMb2FFRy5hWVQteW4waGw/ZnomWzdTdHwyV3RtM25VTEE0Sm50bFozWEt5VWJ5UDU4Nk0rTEd1ejFbamRDdjdrW3RJUn5jaFdjaVZKP0ssY01saixYXzlRWXAzVktxLlhUZ0JEeW1uaWt5fGNFb2hVc35nRHhnZTd5cDdNSTM3Ky4rRjR8JUJyP349Z0w='}]);
_stq.push([ 'clickTrackerInit', '94048608', '630' ]);
	</script>
<noscript>&lt;img src="https://pixel.wp.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /&gt;</noscript>
<script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script>


<div class="comment-likes-overlay" style="display: none;"></div><div id="sharing_email" style="display: none;">
		<form action="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/" method="post">
			<label for="target_email">Send to Email Address</label>
			<input type="email" name="target_email" id="target_email" value="">

			
				<label for="source_name">Your Name</label>
				<input type="text" name="source_name" id="source_name" value="">

				<label for="source_email">Your Email Address</label>
				<input type="email" name="source_email" id="source_email" value="">

						<input type="text" id="jetpack-source_f_name" name="source_f_name" class="input" value="" size="25" autocomplete="off">
			<script> document.getElementById('jetpack-source_f_name').value = ''; </script>
			<div class="recaptcha" id="sharing_recaptcha"></div><input type="hidden" name="recaptcha_public_key" id="recaptcha_public_key" value="6LcYW8MSAAAAADBAuEH9yaPcF7lWh11Iq62ZKtoo">
			<img style="float: right; display: none" class="loading" src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/loading.gif" alt="loading" width="16" height="16" scale="0">
			<input type="submit" value="Send Email" class="sharing_send">
			<a rel="nofollow" href="https://weiminwang.blog/2016/06/09/pyspark-tutorial-building-a-random-forest-binary-classifier-on-unbalanced-dataset/#cancel" class="sharing_cancel">Cancel</a>

			<div class="errors errors-1" style="display: none;">
				Post was not sent - check your email addresses!			</div>

			<div class="errors errors-2" style="display: none;">
				Email check failed, please try again			</div>

			<div class="errors errors-3" style="display: none;">
				Sorry, your blog cannot share posts by email.			</div>
		</form>
	</div><img src="./PySpark tutorial – a case study using Random Forest on unbalanced dataset – Weimin Wang_files/g.gif" alt=":)" id="wpstats" scale="0"></body></html>